<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>紫光同创 FPGA 开发之 PDS 在线逻辑分析仪使用方法</title>
      <link href="/2025/01/07/24-PDS-Debug/"/>
      <url>/2025/01/07/24-PDS-Debug/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在 FPGA 开发过程中，使用在线逻辑分析仪对信号波形分析可以有效排除故障，是 FPGA 学习开发过程中不可或缺的重要技能。</p></blockquote><p>紫光同创 FPGA 开发过程中，支持两种添加在线逻辑分析仪的方法，分别是可视化操作界面添加和 Verilog 中添加。</p><h4 id="可视化操作">1 可视化操作</h4><p>在 TOOL 工具栏选择 Inserter 配置信号，选择 JtagHub 目录下 DebugCore 即可进行配置。</p><p>需要分别配置 Trigger Parameters、Net Connections、PowerOn Init Parameters 三栏，其中具体信号配置在 Net Connections 下。</p><p>为防止综合时优化，需要在 RTL 代码中相关信号部分添加以下内容，从而防止综合工具优化。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reg</span>  A <span class="comment">/*synthesis syn_preserve=1*/</span>; </span><br><span class="line"><span class="keyword">wire</span> B <span class="comment">/*synthesis syn_keep=1*/</span>    ; </span><br></pre></td></tr></table></figure><h4 id="代码插入">2 代码插入</h4><p>按照信号种类增加相应说明即可，主要分为时钟信号、复位信号，其他的触发信号只需要简写即可。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">input</span> clk <span class="comment">/* synthesis PAP_MARK_DEBUG=&quot;&lt;0/c0/0&gt;&quot; */</span>, </span><br><span class="line"><span class="keyword">input</span> rst <span class="comment">/* synthesis PAP_MARK_DEBUG=&quot;&lt;1/r0/0&gt;&quot; */</span>,</span><br><span class="line"><span class="keyword">input</span>  A <span class="comment">/* synthesis PAP_MARK_DEBUG=&quot;true&quot; */</span>， </span><br><span class="line"><span class="keyword">output</span> B <span class="comment">/* synthesis PAP_MARK_DEBUG=&quot;true&quot; */</span>，</span><br><span class="line"><span class="keyword">reg</span>  A  <span class="comment">/* synthesis PAP_MARK_DEBUG=&quot;true&quot; */</span>;  </span><br><span class="line"><span class="keyword">wire</span> B  <span class="comment">/* synthesis PAP_MARK_DEBUG=&quot;true&quot; */</span>; </span><br></pre></td></tr></table></figure><p>然后，同样的方式打开上述 Inserter 选项查看配置结果即可。</p><h4 id="总结">3 总结</h4><p>实际使用过程中来说，更推荐 RTL 代码插入的方式，这样不需要太多关注综合会优化掉的部分信号。</p><p>此外，打开 Inserter 后会自行进行综合，实际使用过程中还是会遇到一些新增需要分析的信号无法更新的问题，此时，手动重新编译下，再打开工具就会正常。</p><blockquote><p>⚓ Carl Zhao<br> 📧 邮箱：1005513510@qq.com<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋不忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PDS </tag>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RK3588 设备上 Linux 根文件系统的移植</title>
      <link href="/2024/12/27/23-first-to-learn-linux/"/>
      <url>/2024/12/27/23-first-to-learn-linux/</url>
      
        <content type="html"><![CDATA[<blockquote><p>近日，在 RK3588 设备上进行开发时，厂家提供基于 Buildroot 定制的精简 Linux 根文件系统不太适应，因此重新定制 Ubuntu 根文件系统并烧录。</p></blockquote><h4 id="问题所在利其器">1 问题所在:利其器</h4><p>上学时，购买的开发板都是学习的利器，提供的资源以及资料，可以让初学者不费吹灰之力上手。然而，在工作中遇到的开发板可谓是一言难尽了。最近，使用某厂商开发的 RK3588 时，就遇到了一些问题，其根系统由 Buildroot 定制的精简系统。如果需要安装工具必然需要交叉编译后导入到板上才可使用，对于开发者而言可能并不是特别友好，因此考虑了几种可行方式旨在让开发过程变得顺畅，工欲善其事必先利其器嘛。</p><ul><li>安装 gcc 实现本地编译；</li><li>通过写个 sh 脚本文件，实现一键自动交叉编译并 scp 到开发板；</li><li>通过 docker 运行 ubuntu，然后编译。</li></ul><p>毫无疑问，安装 gcc 是上上策，因为后续的开发规划中，RK3588 需要承担一定的上位机作用，首当其中的就要求 RK3588 可以实现本地编译。</p><p>通过一键执行脚本是下下策，因为这部分属于非主要开发工作，所以肯定不可能停留太多时间，所以规定了一个日期如果搞定不了好的方法，现阶段就优先采取这个方法。</p><p>docker 运行 ubuntu 执行编译，这个在多次发现镜像站失效后便放弃了，主要不熟悉的工具耗费的时间无可计量，会导致后续开发时间变得不可控。</p><h4 id="问题引发的问题">2 问题引发的问题</h4><p>通过上述，不难发现。虽说上面有三种方法，其实只有第一种是需要花费时间值得去尝试解决的，第二种方法并不能解决实质，第三种方法属于所熟悉技术路线以外的方法，是属于后续如果无法绕开会尝试的可行性替代方案。</p><p>如果是在 Ubuntu 上安装 gcc 只需要一步，当然，可能需要更换下 apt 的源并执行下 update。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install gcc</span><br></pre></td></tr></table></figure><p>可是 Buildroot 定制的根文件系统就没有 apt 这种包管理工具。不过 Buildroot 定制的根文件系统可以安装 gcc，然而现实是编译定制化支持 gcc 的根文件系统后依旧无法运行，原因还缺一些库文件。</p><p>从上述的实际操作出发，可以发现，如果没有包管理工具，单独交叉编译某个工具后，依然存在很多问题。于是，问题进一步进化为，如何在厂家提供的 SDK 上编译一个支持包管理的 linux 系统。</p><p>Buildroot 定制的系统是可以通过 "make menuconfig" 支持 opkg 包管理工具的，然而，通过实际操作发现其源相对比较难找，并且版本管理混乱，很难和 apt 相提并论，遂放弃研究。</p><h4 id="回归底层">3 回归底层</h4><p>从浅薄认知出发，Linux 系统主要分为：</p><ul><li>U-Boot，主要作用是启动 boot 以及加载 Kernel 和根文件系统 loader 两个功能；</li><li>Kernel，系统核心，板卡设备相关定义在该部分；</li><li>Rootfs，根文件系统，主要是工具以及面向用户的支持。</li></ul><p>如果需要系统支持 apt 只需要将根文件系统替换为 Ubuntu 相关的底包即可。U-Boot 和 Kernel 继续与原厂 SDK 保持一致即可。</p><p>根文件系统编译一共有两种方法，一种是通过定义 Bulidroot 中的底包继续使用 Buildroot 定制即可；另一种是下载 Ubuntu 根文件系统，然后根据需求交叉编译生成根文件系统。</p><h4 id="完美解决">4 完美解决</h4><p>根据上述方法，编译生成 rootfs.img 根文件系统后，通过 Rockchip 提供的开发工具，可以选择只升级 rootfs 镜像，从而实现官方 SDK 到 Ubuntu 的支持。</p><p>虽然，更新根文件系统到 Ubuntu 后，风扇便开始转个不停，但有一说一，除了能耗外，新系统真是比官方原厂提供的系统强太多。</p><ul><li>1.无需交叉编译，本地即可实现编译；</li><li>2.得益于 apt 的支持，想装什么装什么；</li><li>3.各种问题也可以找到通用解决方法；</li></ul><p>总之，回归到熟悉的环境，常用的操作方式，效率各方面都提高了很多。</p><blockquote><p>⚓ Carl Zhao<br> 📧 邮箱：1005513510@qq.com<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋不忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ARM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从车主角度浅谈极越倒闭带来的影响</title>
      <link href="/2024/12/24/22-ROBOCAR/"/>
      <url>/2024/12/24/22-ROBOCAR/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本科时就特别喜欢智能驾驶，当然那个时候由于人工智能尚未像如今这么发达，所以一切都处于萌芽阶段，大多数听上去也更觉得是科幻。也是在那个时候第一次听说百度 Apollo 智驾，并且总是幻想自己未来可以有一台这样的带自动驾驶的概念车。毕竟那时候，无论从科技还是从造价，拥有一台带自动驾驶的车是一场最终幻想。</p></blockquote><p>随着人工智能的发展、承载算力资源硬件的提升以及人工神经网络的普及应用，自动驾驶也不再是遥不可及的梦。越来越多的车厂视智能驾驶为未来弯道超车的关键技术，投身至该行业，其中比较卓越的厂商包括华为、特斯拉、小鹏以及今天的主角极越。</p><h4 id="遇见极越">1 遇见极越</h4><p>24 年五一期间闲逛车展，当时心目中的理想车型是自动驾驶炒得火热的小鹏 P7 和华为智界 S7。在车展，见识到仰望的人潮人海、也见识到传统油车降价后依旧无人问津的囧态。</p><p>当时因为刷何同学视频，第一次听说了极氪，所以也跑去极氪展台了解了下极氪汽车。当时接待的极氪工作人员与很多热爱踩高贬低的市场营销人员不同，他输出的观念既有对国产新能源以及极氪优秀操纵性能的自信，同时也毫不吝啬对同行汽车品牌小米以及同门师弟极越的赞美。</p><p>与极氪工作人员聊天过程中，了解到小米汽车挖了吉利一个研究院团队，所以底盘几乎与吉利浩瀚架构同宗同门。同时，他也说，第一辆车最好是不要买，容易成为垫脚石。讨论智驾的过程中，他表示目前还不成熟，当前中国市场比较优秀的只有华为和自家的小兄弟极越。也正是由于他公正客观的观点输出，所以后面专门去极越展台去主动了解极越汽车。</p><p>极越展台，如果放到油车专区也不会显得格格不入，反而其放置在新能源专区稍显冷落。展台除了工作人员，就只剩下几个小孩在研究极越 01，有几个在车里玩游戏，有几个绕着车时不时按按展车的按钮。</p><p>坐上极越 01 主驾，映入眼帘的是一块超大的屏幕。同时，汽车的自动门和优秀的智能座舱也深深吸引了我。在过去，我一直认为自动门是高级商务后排座位的专属。</p><p>后面，就是俗套的试驾以及更深入的了解。在工作人员的介绍中，百度加吉利的组合让我降低了对极越这个新品牌的忧虑。百度的智能驾驶加上吉利的浩瀚架构让我觉得极越 01 无论是智能方面还是机械方面都是遥遥领先。</p><p>当时可能百度智能驾驶下放的力度不够，在试驾后，个人对极越 01 的智能驾驶并不满意。当时的第一选择是智界 S7，图灵地盘加与问界 M9 同配置的智能驾驶外设，可以保证智能驾驶能一直升级拥有最新最先进的智驾体验。然而，营销人员通过技巧强行锁单让我见识到该人员的卑劣性，所以后面就打算暂时不买车。因为当时固态电池下半年发布也比较火，固态电池是值得让人等等的。当然，后续在车企的朋友也说了，没必要等，固态电池不会很快适应市场，价格肯定会比较高。</p><p>后面，极越 01 的工作人员应该是比较闲，每天电话轰炸邀请试驾他们的新版本，并且承诺月底在苏州的智驾体验达到华为。同时，给到的价格以及各种优惠都十分让人心动。就这样很快便提车了，拥有了极越 01 陪伴型汽车形态机器人。</p><p>题外话，个人觉得整个提车到上保险以及上牌的过程中，存在很多监管问题，个人隐私信息特别容易在这个过程中被泄露，甚至被不法分子利用。</p><h4 id="陪伴机器人">2 陪伴机器人</h4><p>5 月提车，拥有极越 01 后，当时智驾版本依然是 1.4 版本，在很多路段都严重存在模仿学习痕迹，智驾水平很是一般。</p><p>然后当初吸引入手的条件之一，智驾宝也形同虚设。智驾过程中，如果发生碰撞，智驾宝会承担有限赔偿。然而如果在即将碰撞时，人工介入了，哪怕降低了事故，也不再赔偿范畴。因为这一条，我对整个极越 01 的营销人员都十分反感。</p><p>当时，从苏州回家，在沈海高速，智驾遇到了一点小问题，当时发到群里，极越营销人员没一个出来解决问题的，也是让人十分寒心，当时就觉得这样的团队不靠技术只靠营销最后必然走向覆灭。</p><p>智驾智仓是百度的，底盘以及核心机械部分是吉利的，极越团队以营销为主也是可以理解的。只是，营销人员不分青红皂白、只要提一点极越 01 的改进意见，就无脑喷。真心让人觉得这样的公司如果长久了，必然是背后的爸爸妈妈足够强大，如果有天爸妈不带了，自然而然就像小混混一样，扶不起来了。</p><p>可是，后面智驾新版本发布，整个智驾体验提升到在苏州随便开的水平。此时，也懒得理睬那些营销人员，内心深处觉得车是好车就很值得。</p><p>极越 01 也陪我从南至北、从北至南跨越过很多城市。</p><h4 id="极越倒闭">3 极越倒闭</h4><p>前不久，听说极越倒闭，倒也没觉得有什么意外，以为又是一家以营销为核心团队的又一次作死营销罢了。</p><p>然而，随着事件的慢慢发酵，事件走向让我这个对极越营销团队十分反感的车主都产生了危机意识。</p><p>其实，对极越突然宣告的“创业 2.0”并不意外，不过没想到来的这么快。极越是百度和吉利合资的品牌，核心是百度，吉利只是为百度提供资质，并且有一手押宝未来的想法。然而，随着收购魅族、与国际智驾团队合作、自研智驾智仓系统，极越对于吉利而言，仅仅只剩下作为极越供应商赚钱这一目标。</p><p>极越对于双方的意义就变得不对等，百度越来越变成付出的一方，吉利虽作为投资者，但是更多的在于提供资质，同时机械部件即作为投资，也用来收益。</p><p>这样的局，必然而然会走到掀桌子的一天。</p><h4 id="写在最后">4 写在最后</h4><p>这次极越突然的倒闭行为，很难确定背后是谁在操作，是吉利还是百度，亦或是两者争斗下极越的自救。</p><p>从中国新能源角度出发，个人觉得无论何种原因极越突然倒闭，都会影响中国新能源走向世界的信心。</p><p>如果是有心者操纵，建议一查到底。如果有必要，政府层面介入，保证新能源这张牌的可靠性。适当的时候，对那些善于操纵不听话的小孩可以收走资质，水可载舟亦可覆舟。</p><p>极越对于背后股东而言可能损失很小，但是从国家层面出发，一家健康的并且有两位大厂扶持的新能源厂商突然暴毙，必然会影响对新能源的信心。</p><p>最后的最后，希望极越这次倒闭行为仅仅是因为取其上者得其中，希望仅仅是部分操纵者为达到一个浅层目标发动的深层变动而已。</p><p>作为车主，从自身角度出发，希望极越越来越好，否则后面售后以及需要连接服务器使用的智驾都无法再体验。</p><p>然而，车主始终是最无法维权的一方，当初的一纸承诺也随着车企的倒闭变得一文不值。</p><blockquote><p>⚓ Carl Zhao<br> 📧 邮箱：1005513510@qq.com<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极越机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip 更新清华源</title>
      <link href="/2024/12/24/21-pip-source/"/>
      <url>/2024/12/24/21-pip-source/</url>
      
        <content type="html"><![CDATA[<h4 id="临时使用">1 临时使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple some-package</span><br></pre></td></tr></table></figure><h4 id="配置使用">2 配置使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple --upgrade pip</span><br><span class="line">pip config <span class="built_in">set</span> <span class="keyword">global</span>.index-url https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple</span><br><span class="line">pip config <span class="built_in">set</span> <span class="keyword">global</span>.extra-index-url <span class="string">&quot;&lt;url1&gt; &lt;url2&gt;...&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋不忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>紫光同创 FPGA 开发工具 PDS 入门</title>
      <link href="/2024/12/09/20-PDS/"/>
      <url>/2024/12/09/20-PDS/</url>
      
        <content type="html"><![CDATA[<blockquote><p>近日使用紫光同创 TITAN2 系列 FPGA PG2T390H-6FFBG676 进行卷积神经网络加速实验，需要使用 PDS 软件，其操作思路与 Vivado 以及 Quartus 大体一致，将其中不太一样的部分记录下防止后面遗忘频繁翻阅手册。</p></blockquote><p>首先，选择非 Xilinx 系的 FPGA 进行 AI 相关的开发是需要一定勇气的，毕竟缺失了 HLS 的支持，全部 HDL 语言重构模块成了比较理想的选择。</p><p>不过这也算是一件非常有趣的事。首先 Verilog 实现的过程中，肯定能加深理解。其次，并行计算肯定以及与外部数据交互肯定比起 HLS 生成的代码更容易修改。</p><h4 id="约束文件可视化配置">1 约束文件可视化配置</h4><p>单击 "Tools -&gt; User Constraint Editor (Timing and Logic) -&gt; Pre Synthesize UCE"，打开选择 Device 根据原理图配置引脚和电平即可。</p><h4 id="程序加载">2 程序加载</h4><p>单击 "Tools -&gt; Condiguration"，也可以直接在安装目录下打开 cdt_cfg.exe，在主界面右击选择 Scan Device，弹出窗口选择对应的 bit 文件，最后右击芯片选择 Program 即可。</p><h4 id="程序固化">3 程序固化</h4><p>打开安装目录下 cdt_cfg.exe，在主界面右击选择 Scan Device，弹出窗口取消选择的 bit 文件，右击芯片选择 Scan Outer Flash,然后右击 Outer Flash 选择 Program 即可。</p><p>目前，值得记录的可能就这么多，后续会补充健全。</p><h4 id="固化程序生成">4 固化程序生成</h4><p>单击 "Tools -&gt; Condiguration"，弹出弹出页面 Operations 菜单选择 Convert File。</p><p>配置如下信息，点击 OK 即可在配置的目录下输出 SFC 固化文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Factory Name：GIGA </span><br><span class="line">Device Name：GD25Q256D； </span><br><span class="line">Flash Read Mode：SPI X4, 24-bit address； </span><br><span class="line">BitStramFile：选择.sbit 位流文件； </span><br><span class="line">Output File Name：选择输出.sfc 路径。</span><br></pre></td></tr></table></figure><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋不忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PDS </tag>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLOv5 单目标分类简明教程</title>
      <link href="/2024/12/06/19-yolov5/"/>
      <url>/2024/12/06/19-yolov5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>YOLOv5 能够实现快速的目标检测，适合需要实时处理的应用场景。</p></blockquote><h4 id="安装">1 安装</h4><p>从 Github 上下载并安装运行需要使用的依赖，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ultralytics/yolov5</span><br><span class="line"><span class="built_in">cd</span> ./yolov5</span><br><span class="line">%pip install -qr requirements.txt </span><br></pre></td></tr></table></figure><p>验证是否可以正常运行，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line">display = utils.notebook_init()  <span class="comment"># checks</span></span><br></pre></td></tr></table></figure><p>终端显示输出安装环境的状态信息以及计算机的相关信息，即可正常运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YOLOv5  2024-12-5 Python-3.8.20 torch-2.4.1+cpu CPU</span><br><span class="line">Setup complete  (20 CPUs, 31.7 GB RAM, 59.3/84.1 GB disk)</span><br></pre></td></tr></table></figure><p>YOLOv5 可以实现目标分类与目标识别，下面简单介绍下目标分类的实现。</p><h4 id="推理">2 推理</h4><p>终端运行推理脚本，配置与训练模型与需要分类的数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!python classify/predict.py --weights yolov5s-cls.pt --img 224 --<span class="built_in">source</span> data/images</span><br></pre></td></tr></table></figure><p>可以通过以下脚本显示推理后的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display.Image(filename=<span class="string">&#x27;runs/predict-cls/exp/zidane.jpg&#x27;</span>, width=<span class="number">600</span>)</span><br></pre></td></tr></table></figure><h4 id="验证">3 验证</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!python classify/val.py --weights yolov5s-cls.pt --data ../datasets/imagenet --img 224 --half</span><br></pre></td></tr></table></figure><h4 id="训练">4 训练</h4><p>对于单目标分类问题，不需要打标签，只需要将同一分类放到同一文件夹即可。</p><p>同时，修改训练脚本中有关数据集的选项即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(<span class="string">&quot;--data&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;imagenette160&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;cifar10, cifar100, mnist, imagenet, ...&quot;</span>)</span><br></pre></td></tr></table></figure><p>也可以在执行脚本时，指定参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!python classify/train.py --model yolov5s-cls.pt --data imagenette160 --epochs 5 --img 224 --cache</span><br></pre></td></tr></table></figure><p>以上就是使用 YOLOv5 进行单目标分类问题的简明教程。</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋不忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> YOLO </tag>
            
            <tag> 单目标分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过 vscode ssh 远程连接 ARM linux</title>
      <link href="/2024/11/28/18-none-linux-install-vscode/"/>
      <url>/2024/11/28/18-none-linux-install-vscode/</url>
      
        <content type="html"><![CDATA[<blockquote><p>近日，在使用 RK3588 时，移植的精简 Linux 既没有 apt 等安装工具，同时也没有 C 编译器。 这样就需要首先在 PC 端使用交叉编译通过后，再将编译的文件传到 RK3588 上才能使用。</p></blockquote><h4 id="遇到问题">1 遇到问题</h4><p>RK3588 通过 buildroot 定制的 Linux 啥安装工具也没有，必须使用源码编译才能安装必须的软件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt</span><br><span class="line">dpkg</span><br><span class="line">rpm</span><br><span class="line">yum</span><br></pre></td></tr></table></figure><p>然而，源码编译在 ARM 端无法通过，因为 ARM 没有编译工具。同时，由于 ARM 端没有安装工具无法安装 C 编译器。</p><p>同时，该定制版本 Linux 中的 tar 压缩解压工具由于版本问题无法实现 tar.gz 文件的解压，导致很多问题的产生。例如，通过 vscode 无法 ssh 远程 ARM 端。</p><h4 id="解决思路">2 解决思路</h4><p>要想解决上述问题，有两条可行的道路，要不重新移植 Linux，要不通过交叉编译实现 ARM 端软件工具的安装。</p><p>重新移植 Linux 无论是时间成本还是技术成本上而言，都是特别高的，而且容易一步错、步步错。</p><p>交叉编译环境的搭建无论是哪种方案都需要去做的，于是，我们选取了通过交叉编译实现 ARM 端软件工具的安装。</p><h4 id="手到擒来">3 手到擒来</h4><p>老版本 tar 工具在使用 -zxvf 指令时总会报 -z 不是可用的配置项。</p><p>首先，下载新版本 tar 源码包，在 PC 端使用交叉编译工具编译，最终会在 result/bin 文件夹下生成 tar 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf tar-1.27.1.tar.gz </span><br><span class="line"><span class="built_in">cd</span> tar-1.27.1 </span><br><span class="line"><span class="built_in">mkdir</span> result</span><br><span class="line">CC=aarch64-buildroot-linux-gnu-gcc ./configure  --prefix=`<span class="built_in">pwd</span>`/result  --host=arm-linux </span><br><span class="line">make clean &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>生成的 tar 文件，通过 ssh 传递至 ARM 端。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ./result/bin/tar root@ip:/</span><br></pre></td></tr></table></figure><p>然后，连接至 ARM 端，进行删除 usr/bin 下原来的 tar，移动新编译的 tar 至 usr/bin 文件下，即可实现 tar 的更新。</p><p>需要注意的是，最好是别直接删除原来的文件，可以备份防止意外。</p><h4 id="回归重点">4 回归重点</h4><p>更新 tar 后，发现 vscode 可以 ssh 连接 ARM 端了。</p><p>原因很简单，vscode 连接远程时，会从服务器下载 tar.gz 的文件，然后这个文件在 ARM 本地无法解压，于是就报错了。</p><p>更新 tar 后就不存在问题了。</p><p>当然，vscode 感觉可以在本地 PC 解压后 ssh 传递至 ARM 设备，这样也能保证 ARM 设备在没有联网的情况下正常安装可能是更好的方案。</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋不忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ARM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>光子学智能变量优化工具( PIVOT )用户手册</title>
      <link href="/2024/11/11/17-PIVOT-User-Guide/"/>
      <url>/2024/11/11/17-PIVOT-User-Guide/</url>
      
        <content type="html"><![CDATA[<div data-align="center"><font size="5"> 光子学智能变量优化工具（PIVOT）操作手册 </font></div><h2 id="pivot-简介">1 PIVOT 简介</h2><p>随着科学探索越来越深入，各行各业设计都呈现出设计尺度越来越小、设计规模越来越大、集成化程度越来越高的趋势，随之而来的是设计参数空间的维度越来越大，传统的扫描工具在面对日渐增长的设计参数空间维度时，很难在短时间内得到可行解。</p><p>优化算法可以在更大设计参数空间上更快速获取可行解，是理想的解决方案。然而，算法开发成本高，虽然也有很多开源算法，然而开源算法一般是通用型算法，必须懂得算法原理后重构部分代码以适配项目，因此要求执行仿真设计优化的员工必须既懂得相关领域的知识、又懂得算法以及编程相关的知识才可以执行设计参数空间很大的仿真设计。</p><p>为了解决上述难题，让各行业优秀的设计人才可以专注于设计本身，而不需要花费额外精力学习探索算法，把优化算法只作为类似于仿真的基础工具，逍遥科技推出光子学智能变量优化工具（Photonic Intelligent Variable Optimization Tool ， 以下简称 PIVOT）。PIVOT 旨在为用户提供从扫描到优化的进阶，用户只需要 4 行代码即可实现工具的可视化调用，可视化操作界面只需要简单的选择、填写即可调用支持多种并行方案的优化算法。同时，PIVOT 提供灵活的 API 调用，可以为各领域的仿真环境提供服务。PIVOT 也关注用户痛点问题，支持优化中断恢复，方便用户在优化过程中意外中断时提供继续优化的功能，减少了因各种情况增加的时间成本问题。此外，PIVOT 支持实时优化过程记录的功能，实时记录不仅仅支持设计参数和优化目标，还支持记录仿真环境中的其他变量，方便用户为后续分析处理阶段采集相关数据。</p><p>现阶段，PIVOT 内置非梯度类优化算法，同时优化目标函数采用最小化并且需要用户在工具外进行定义。</p><h2 id="pivot-功能描述">2 PIVOT 功能描述</h2><h3 id="pivot-设计参数配置">2.1 PIVOT 设计参数配置</h3><ul><li><p>当前脚本：（必填）调用方式下，自动获取调用工具的脚本；</p></li><li><p>目标函数：（必填）脚本中定义目标函数直接选择；</p></li><li><p>参数维度：（必填）;</p></li><li><p>参数下边界：（可选）;</p></li><li><p>参数上边界：（可选）;</p></li><li><p>参数精度：（必填）默认为 1e-7;</p></li><li><p>等式约束：（可选）;</p></li><li><p>不等式约束：（可选）;</p></li></ul><h3 id="pivot-算法参数配置">2.2 PIVOT 算法参数配置</h3><ul><li><p>种群大小：（必填）默认为 50；</p></li><li><p>变异率：（必填）默认为 0.001；</p></li><li><p>并行数：（可选）默认为矢量化加速，支持填写数字切换至 joblib 并行方案；</p></li><li><p>迭代次数：（必填）默认为 100；</p></li><li><p>分类算子：（必填）多种可选；</p></li><li><p>选择算子：（必填）多种可选；</p><ul><li>竞标赛算法留存数：（必填）默认为 3；</li></ul></li><li><p>交叉算子：（必填）多种可选；</p></li><li><p>变异算子：（必填）多种可选；</p></li></ul><h2 id="pivot-选项配置">2.3 PIVOT 选项配置</h2><ul><li><p>恢复设置；</p><ul><li>如果选中恢复，需要选择恢复 json 文件；</li></ul></li><li><p>记录设置；</p><ul><li><p>记录恢复文件，可选是否配置；</p></li><li><p>记录恢复步长，默认为 10；</p></li><li><p>记录参数，其他参数与优化参数一起记录；</p></li><li><p>记录文件，可选是否配置；</p></li></ul></li></ul><h2 id="案例展示">3 案例展示</h2><h3 id="可编程光子数字链路的自动化配置">3.1 可编程光子数字链路的自动化配置</h3><h4 id="案例简述">3.1.1 案例简述</h4><p>可编程光子数字链路由多个可编程单元构成，每个单元通过电控可工作于三种状态，分别是直通状态、交叉状态以及部分耦合状态。其中，直通状态，即上输入端口输入光，从相应上输出端口输出光。交叉状态，也是全耦合状态，即上端口输入光，从下输出端口输出光。部分耦合状态介于两者之前，输出端口输出光的比例随着耦合效率的变化而变化。</p><p>本案例由于不引入光的强度阶梯化后的信息用作数字量，因此只考虑直通和交叉两种工作状态。通过控制单元的两种工作状态，从而控制光的输出端口。通过上述描述的配置，光从左下端口输入，每次最多从右侧一个输出端口输出光。</p><h4 id="链路搭建">3.1.2 链路搭建</h4><p>本案例，我们选择强大的光电一体化仿真工具 pSim Plus 搭建链路。为简化搭建链路，我们选择定向耦合器作为单元器件，并且只搭建 2*2 网络。pSim Plus 中定向耦合器通过调节耦合效率可以实现与上述单元一致的三种状态，本案例中只考虑耦合效率为 0 或者为 1，分别对应直通和交叉两种状态。 单元。其中，光从光网络分析仪输出至单元 C_3 左下端口，光分别从 C_11、C_12、C_7、C_5 输出至光网络分析仪</p><h4 id="链路参数化">3.1.3 链路参数化</h4><p>得益于 pSim Plus 强大的脚本支持工具，我们可以在脚本环境在参数化以及优化搭建好的链路模型。下述代码将上一小节创建的链路进行参数化，其中，p 为设计变量一共 12 维。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ckt = get_circuit()</span><br><span class="line">ckt.C_1.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">0</span>])]</span><br><span class="line">ckt.C_2.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">1</span>])]</span><br><span class="line">ckt.C_3.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">2</span>])]</span><br><span class="line">ckt.C_4.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">3</span>])]</span><br><span class="line">ckt.C_5.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">4</span>])]</span><br><span class="line">ckt.C_6.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">5</span>])]</span><br><span class="line">ckt.C_7.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">6</span>])]</span><br><span class="line">ckt.C_8.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">7</span>])]</span><br><span class="line">ckt.C_9.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">8</span>])]</span><br><span class="line">ckt.C_10.coupling_coefficients_table_te = [(<span class="number">1.55</span>,p[<span class="number">9</span>])]</span><br><span class="line">ckt.C_11.coupling_coefficients_table_te = [(<span class="number">1.55</span>,p[<span class="number">10</span>])]</span><br><span class="line">ckt.C_12.coupling_coefficients_table_te = [(<span class="number">1.55</span>,p[<span class="number">11</span>])]</span><br></pre></td></tr></table></figure><h4 id="构建目标函数">3.1.4 构建目标函数</h4><p>目前，构建目标函数还需要在工具外实现，这里我们在 pSim Plus 的脚本环境中构建目标函数。目标函数输入为设计参数，然后设计参数传递至链路模型，链路模型运行仿真后返回数据，用户需要根据返回的数据构建最终的优化结果。将上述的参数化过程进一步封装成函数，并编写优化目标函数。同时，为后续可以直接生成最优解参数链路，这里链路参数化过程引入了 method 方法， 为 0 调用仿真，用于目标函数，为 1 时导出原理图，方便后续用户可视化操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_obj</span>(<span class="params">p, method = <span class="number">0</span></span>):</span><br><span class="line">    ckt = get_circuit()</span><br><span class="line">    ckt.C_1.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">0</span>])]</span><br><span class="line">    ckt.C_2.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">1</span>])]</span><br><span class="line">    ckt.C_3.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">2</span>])]</span><br><span class="line">    ckt.C_4.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">3</span>])]</span><br><span class="line">    ckt.C_5.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">4</span>])]</span><br><span class="line">    ckt.C_6.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">5</span>])]</span><br><span class="line">    ckt.C_7.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">6</span>])]</span><br><span class="line">    ckt.C_8.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">7</span>])]</span><br><span class="line">    ckt.C_9.coupling_coefficients_table_te  = [(<span class="number">1.55</span>,p[<span class="number">8</span>])]</span><br><span class="line">    ckt.C_10.coupling_coefficients_table_te = [(<span class="number">1.55</span>,p[<span class="number">9</span>])]</span><br><span class="line">    ckt.C_11.coupling_coefficients_table_te = [(<span class="number">1.55</span>,p[<span class="number">10</span>])]</span><br><span class="line">    ckt.C_12.coupling_coefficients_table_te = [(<span class="number">1.55</span>,p[<span class="number">11</span>])]</span><br><span class="line">        env = get_environment(</span><br><span class="line">        wl_start = <span class="number">1.55</span>,</span><br><span class="line">        wl_end   = <span class="number">1.55</span>,</span><br><span class="line">        points_num = <span class="number">1</span>,</span><br><span class="line">        freqdomain = <span class="number">1</span>,</span><br><span class="line">        source_power = <span class="number">0</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> method == <span class="number">0</span>:</span><br><span class="line">        ckt_inst = ckt.run(env)</span><br><span class="line">        data = ckt_inst.get_result(<span class="string">&quot;ONA_1&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">elif</span> method == <span class="number">1</span>:</span><br><span class="line">        ckt.export_netlist(env)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 构造最小化目标函数</span></span><br><span class="line"><span class="comment">## 传入设计参数</span></span><br><span class="line"><span class="comment">## 设计参数传递至链路并运行仿真</span></span><br><span class="line"><span class="comment">## 处理仿真后结果，这个结果越小越好</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">obj_func</span>(<span class="params">p</span>):</span><br><span class="line">    new_p = np.where(p==<span class="number">0</span>, <span class="number">0.00001</span>, <span class="number">0.99999</span>)</span><br><span class="line">    data = get_obj(new_p)</span><br><span class="line">    obj  = np.sqrt((data[<span class="string">&quot;input_&#123;&#125;&quot;</span>.<span class="built_in">format</span>(user_defne)][<span class="string">&quot;te_real&quot;</span>])**<span class="number">2</span>+(data[<span class="string">&quot;input_&#123;&#125;&quot;</span>.<span class="built_in">format</span>(user_defne)][<span class="string">&quot;te_imag&quot;</span>])**<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(obj)</span><br><span class="line">    obj_min = np.<span class="built_in">abs</span>(<span class="number">1</span>-obj)</span><br><span class="line">    <span class="keyword">return</span> obj_min</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = np.random.randint(0, 2, 12)</span></span><br><span class="line">user_defne = np.random.randint(<span class="number">0</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><h4 id="调用优化">3.1.5 调用优化</h4><p>极简操作，四行代码直达优化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIVOT <span class="keyword">import</span> PIVOT</span><br><span class="line">win = PIVOT()</span><br><span class="line">win.opti.config(<span class="built_in">globals</span>(), <span class="built_in">locals</span>())</span><br><span class="line">best_x,best_y = start.opti()</span><br></pre></td></tr></table></figure><p>为了直接可视化展示最优解的链路，这里还需要对结果进行下后处理，通过后处理，用户可直观查看优化是否满足需求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(user_defne)</span><br><span class="line">get_obj(best_x, method=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="优化配置">3.1.6 优化配置</h4><p>这里只需要设计参数配置，用户选择在脚本中定义的目标函数。设计参数维度为 12，对应 12 个单元的耦合系数。设计参数上下边界以及精度分别为 0 、1、1，即设计参数只能在 0 和 1 两个量之间变化。</p><p>算法配置页以及可选功能配置页根据需求配置即可，该案例默认配置即可。</p><h4 id="总结">3.1.7 总结</h4><p>该案例提供可复现的项目，包含可视化链路以及优化代码，获取代码联系技术支持。</p><p>该案例配套 PhotoCAD 版图设计代码，详见 <a href="https://photocad-docs.readthedocs.io/en/latest/PICircuits/PICircuits.html">Programmable Photonic Integrated Circuit — PhotoCAD 1.7 documentation (photocad-docs.readthedocs.io)</a></p><h4 id="参考文献">参考文献</h4><p>[1] Zhao Z, Chen T S Y, Han Y, et al. Automatic configuration of programmable photonic digital circuits based on genetic algorithms[C]//International Conference on Optoelectronic Materials and Devices (ICOMD 2022). SPIE, 2023, 12600: 250-255.</p><h3 id="基于微环的波分复用链路参数自动设计">3.2 基于微环的波分复用链路参数自动设计</h3><h4 id="案例简述-1">3.2.1 案例简述</h4><p>案例中，集成四个等效微环模型，通过调整微环的等效半径，从而调节光在微环内一周的相变，使四个级联微环的 DROP 端分别在不同波长下输出。</p><p>用户输入指定的波长 <span class="math inline">\(\lambda1\)</span> 、<span class="math inline">\(\lambda2\)</span> 、<span class="math inline">\(\lambda3\)</span> 、<span class="math inline">\(\lambda4\)</span>，根据后续设定的优化目标函数，设计会朝着用户理想曲线收敛。</p><p>微环等效模型使用定向耦合器模型创建，单个微环模型如下图所示。通过调整等效微环中波导的长度，从而实现微环光程的调整。一般而言，等效模型中波导长度分别选择半周长，从而实现标准微环的仿真。这里，为了使设计参数丰富一点，将两个波导设计为不同长度。</p><h4 id="链路优化">3.2.2 链路优化</h4><p>为了展示 pSim Plus 强大的脚本能力，这里使用脚本创建微环级联等效链路。</p><p>首先，增加器件到链路，使用脚本创建链路时该部分必不可少。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_components_to_circuit</span>(<span class="params">ckt</span>):</span><br><span class="line">    <span class="comment">##实例化器件</span></span><br><span class="line">    ckt.ONA_1 = ps.Optical_Network_Analyzer(n_inputs = <span class="number">4</span>)</span><br><span class="line">    ckt.DC_1  = ps.DirectionalCoupler(coupling_te = <span class="number">1e-1</span>)</span><br><span class="line">    ckt.DC_2  = ps.DirectionalCoupler(coupling_te = <span class="number">1e-1</span>)</span><br><span class="line">    ckt.WGD_1 = ps.Waveguide(length=<span class="number">30</span>, ng_te = <span class="number">4</span>, loss_te =<span class="number">1.5</span>)</span><br><span class="line">    ckt.WGD_2 = ps.Waveguide(length=<span class="number">30</span>, ng_te = <span class="number">4</span>, loss_te =<span class="number">1.5</span>)</span><br><span class="line">    ckt.DC_3  = ps.DirectionalCoupler(coupling_te = <span class="number">1e-1</span>)</span><br><span class="line">    ckt.DC_4  = ps.DirectionalCoupler(coupling_te = <span class="number">1e-1</span>)</span><br><span class="line">    ckt.WGD_3 = ps.Waveguide(length=<span class="number">30</span>, ng_te = <span class="number">4</span>, loss_te =<span class="number">1.5</span>)</span><br><span class="line">    ckt.WGD_4 = ps.Waveguide(length=<span class="number">30</span>, ng_te = <span class="number">4</span>, loss_te =<span class="number">1.5</span>) </span><br><span class="line">    ckt.DC_5  = ps.DirectionalCoupler(coupling_te = <span class="number">1e-1</span>)</span><br><span class="line">    ckt.DC_6  = ps.DirectionalCoupler(coupling_te = <span class="number">1e-1</span>)</span><br><span class="line">    ckt.WGD_5 = ps.Waveguide(length=<span class="number">30</span>, ng_te = <span class="number">4</span>, loss_te =<span class="number">1.5</span>)</span><br><span class="line">    ckt.WGD_6 = ps.Waveguide(length=<span class="number">30</span>, ng_te = <span class="number">4</span>, loss_te =<span class="number">1.5</span>)</span><br><span class="line">    ckt.DC_7  = ps.DirectionalCoupler(coupling_te = <span class="number">1e-1</span>)</span><br><span class="line">    ckt.DC_8  = ps.DirectionalCoupler(coupling_te = <span class="number">1e-1</span>)</span><br><span class="line">    ckt.WGD_7 = ps.Waveguide(length=<span class="number">30</span>, ng_te = <span class="number">4</span>, loss_te =<span class="number">1.5</span>)</span><br><span class="line">    ckt.WGD_8 = ps.Waveguide(length=<span class="number">30</span>, ng_te = <span class="number">4</span>, loss_te =<span class="number">1.5</span>) </span><br><span class="line">    <span class="comment">##器件参数设置</span></span><br><span class="line">    ckt.ONA_1.x, ckt.ONA_1.y = -<span class="number">600</span>,<span class="number">0</span></span><br><span class="line">    ckt.DC_1.x, ckt.DC_1.y   = -<span class="number">200</span>,<span class="number">200</span></span><br><span class="line">    ckt.DC_2.x, ckt.DC_2.y   = -<span class="number">200</span>,-<span class="number">200</span></span><br><span class="line">    ckt.WGD_1.x, ckt.WGD_1.y = -<span class="number">400</span>,<span class="number">0</span></span><br><span class="line">    ckt.WGD_2.x, ckt.WGD_2.y =    <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    ckt.DC_3.x, ckt.DC_3.y   =  <span class="number">400</span>,<span class="number">200</span></span><br><span class="line">    ckt.DC_4.x, ckt.DC_4.y   =  <span class="number">400</span>,-<span class="number">200</span></span><br><span class="line">    ckt.WGD_3.x, ckt.WGD_3.y =  <span class="number">200</span>,<span class="number">0</span></span><br><span class="line">    ckt.WGD_4.x, ckt.WGD_4.y =  <span class="number">600</span>,<span class="number">0</span></span><br><span class="line">    ckt.DC_5.x, ckt.DC_5.y   = <span class="number">1000</span>,<span class="number">200</span></span><br><span class="line">    ckt.DC_6.x, ckt.DC_6.y   = <span class="number">1000</span>,-<span class="number">200</span></span><br><span class="line">    ckt.WGD_5.x, ckt.WGD_5.y =  <span class="number">800</span>,<span class="number">0</span></span><br><span class="line">    ckt.WGD_6.x, ckt.WGD_6.y = <span class="number">1200</span>,<span class="number">0</span></span><br><span class="line">    ckt.DC_7.x, ckt.DC_7.y   = <span class="number">1400</span>,<span class="number">200</span></span><br><span class="line">    ckt.DC_8.x, ckt.DC_8.y   = <span class="number">1400</span>,-<span class="number">200</span></span><br><span class="line">    ckt.WGD_7.x, ckt.WGD_7.y = <span class="number">1200</span>,<span class="number">0</span></span><br><span class="line">    ckt.WGD_8.x, ckt.WGD_8.y = <span class="number">1600</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure><p>其次，器件之前的链接关系定义也是必须的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义器件之间的端口连接以及输入输出</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">link_components_in_circuit</span>(<span class="params">ckt</span>):</span><br><span class="line">    ckt.link(<span class="string">&quot;ONA_1:output&quot;</span>, <span class="string">&quot;op_3:DC_1&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;DC_1:op_1&quot;</span>, <span class="string">&quot;op_1:WGD_2&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;WGD_2:op_0&quot;</span>, <span class="string">&quot;op_2:DC_2&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;DC_2:op_3&quot;</span>, <span class="string">&quot;op_1:WGD_1&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;WGD_1:op_0&quot;</span>, <span class="string">&quot;op_0:DC_1&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;DC_2:op_0&quot;</span>, <span class="string">&quot;input_0:ONA_1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ckt.link(<span class="string">&quot;DC_1:op_2&quot;</span>, <span class="string">&quot;op_3:DC_3&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;DC_3:op_1&quot;</span>, <span class="string">&quot;op_1:WGD_4&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;WGD_4:op_0&quot;</span>, <span class="string">&quot;op_2:DC_4&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;DC_4:op_3&quot;</span>, <span class="string">&quot;op_1:WGD_3&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;WGD_3:op_0&quot;</span>, <span class="string">&quot;op_0:DC_3&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;DC_4:op_0&quot;</span>, <span class="string">&quot;input_1:ONA_1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ckt.link(<span class="string">&quot;DC_3:op_2&quot;</span>, <span class="string">&quot;op_3:DC_5&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;DC_5:op_1&quot;</span>, <span class="string">&quot;op_1:WGD_6&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;WGD_6:op_0&quot;</span>, <span class="string">&quot;op_2:DC_6&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;DC_6:op_3&quot;</span>, <span class="string">&quot;op_1:WGD_5&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;WGD_5:op_0&quot;</span>, <span class="string">&quot;op_0:DC_5&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;DC_6:op_0&quot;</span>, <span class="string">&quot;input_2:ONA_1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ckt.link(<span class="string">&quot;DC_5:op_2&quot;</span>, <span class="string">&quot;op_3:DC_7&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;DC_7:op_1&quot;</span>, <span class="string">&quot;op_1:WGD_8&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;WGD_8:op_0&quot;</span>, <span class="string">&quot;op_2:DC_8&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;DC_8:op_3&quot;</span>, <span class="string">&quot;op_1:WGD_7&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;WGD_7:op_0&quot;</span>, <span class="string">&quot;op_0:DC_7&quot;</span>)</span><br><span class="line">    ckt.link(<span class="string">&quot;DC_8:op_0&quot;</span>, <span class="string">&quot;input_3:ONA_1&quot;</span>)  </span><br></pre></td></tr></table></figure><p>创建的链路需要参数化，并且可以返回求解目标函数需要的仿真分析结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">circuit_operate</span>(<span class="params">method, p</span>):</span><br><span class="line">    circuit = get_circuit()</span><br><span class="line">    circuit.WGD_1.length = p[<span class="number">0</span>]</span><br><span class="line">    circuit.WGD_2.length = p[<span class="number">1</span>]</span><br><span class="line">    circuit.WGD_3.length = p[<span class="number">2</span>]</span><br><span class="line">    circuit.WGD_4.length = p[<span class="number">3</span>]</span><br><span class="line">    circuit.WGD_5.length = p[<span class="number">4</span>]</span><br><span class="line">    circuit.WGD_6.length = p[<span class="number">5</span>]</span><br><span class="line">    circuit.WGD_7.length = p[<span class="number">6</span>]</span><br><span class="line">    circuit.WGD_8.length = p[<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">    env = get_environment(</span><br><span class="line">        wl_start=<span class="number">1.54</span>,</span><br><span class="line">        wl_end=<span class="number">1.55</span>,</span><br><span class="line">        points_num=<span class="number">1001</span>,</span><br><span class="line">        freqdomain=<span class="literal">True</span>,</span><br><span class="line">        source_power=<span class="number">0</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">&quot;run&quot;</span> <span class="keyword">or</span> method == <span class="number">0</span>:</span><br><span class="line">        <span class="comment">## 链路仿真</span></span><br><span class="line">        circuit_inst = circuit.run(env)</span><br><span class="line">        data = circuit_inst.gain(<span class="string">&quot;ONA_1&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">&quot;create&quot;</span> <span class="keyword">or</span> method == <span class="number">1</span>:</span><br><span class="line">        <span class="comment">## 链路生成</span></span><br><span class="line">        circuit.export_netlist(env)</span><br></pre></td></tr></table></figure><p>上面函数定义了方法函数，即可实现仿真运行，又可以最后用于最优参数链路的生成。</p><p>最后定义目标函数，目标函数为越小越好，通过修改 1542、1544、1546、1548 可以修改波分复用链路的波峰。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_sim_result</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_wl_point</span>(<span class="params">wl</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">int</span>( wl - data[<span class="string">&quot;input_0&quot;</span>][<span class="string">&quot;wl&quot;</span>][<span class="number">0</span>]) * (<span class="built_in">len</span>(data[<span class="string">&quot;input_0&quot;</span>][<span class="string">&quot;wl&quot;</span>])-<span class="number">1</span>) / <span class="built_in">int</span>((data[<span class="string">&quot;input_0&quot;</span>][<span class="string">&quot;wl&quot;</span>][-<span class="number">1</span>]-data[<span class="string">&quot;input_0&quot;</span>][<span class="string">&quot;wl&quot;</span>][<span class="number">0</span>])) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    goal = <span class="number">1000</span> *  ((<span class="number">1</span>-np.sqrt(data[<span class="string">&quot;input_0&quot;</span>][<span class="string">&quot;te_real&quot;</span>]**<span class="number">2</span>+data[<span class="string">&quot;input_0&quot;</span>][<span class="string">&quot;te_imag&quot;</span>]**<span class="number">2</span>)[<span class="built_in">int</span>(get_wl_point(<span class="number">1542</span>))]) + </span><br><span class="line">                    (<span class="number">1</span>-np.sqrt(data[<span class="string">&quot;input_1&quot;</span>][<span class="string">&quot;te_real&quot;</span>]**<span class="number">2</span>+data[<span class="string">&quot;input_1&quot;</span>][<span class="string">&quot;te_imag&quot;</span>]**<span class="number">2</span>)[<span class="built_in">int</span>(get_wl_point(<span class="number">1544</span>))]) + </span><br><span class="line">                    (<span class="number">1</span>-np.sqrt(data[<span class="string">&quot;input_2&quot;</span>][<span class="string">&quot;te_real&quot;</span>]**<span class="number">2</span>+data[<span class="string">&quot;input_2&quot;</span>][<span class="string">&quot;te_imag&quot;</span>]**<span class="number">2</span>)[<span class="built_in">int</span>(get_wl_point(<span class="number">1546</span>))]) +  </span><br><span class="line">                    (<span class="number">1</span>-np.sqrt(data[<span class="string">&quot;input_3&quot;</span>][<span class="string">&quot;te_real&quot;</span>]**<span class="number">2</span>+data[<span class="string">&quot;input_3&quot;</span>][<span class="string">&quot;te_imag&quot;</span>]**<span class="number">2</span>)[<span class="built_in">int</span>(get_wl_point(<span class="number">1548</span>))])) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (goal) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">goal_func</span>(<span class="params">model_para</span>):</span><br><span class="line">    data = circuit_operate(method = <span class="string">&quot;run&quot;</span>, p = model_para)</span><br><span class="line">    goal = get_sim_result(data)</span><br><span class="line">    <span class="built_in">print</span>(model_para, goal)</span><br><span class="line">    <span class="keyword">return</span> goal</span><br></pre></td></tr></table></figure><p>PIVOT 优化工具支持脚本参数输入，例如上述定义的上下边界可以直接输入进系统。</p><p>最后，调用 PIVOT 执行优化即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">## 参数初始化</span></span><br><span class="line">    p_lb = [<span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line">    p_ub = [<span class="number">4</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">45</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 导入 AAO 并配置执行优化</span></span><br><span class="line">    <span class="keyword">from</span> PIVOT <span class="keyword">import</span> PIVOT</span><br><span class="line">    start = PIVOT()</span><br><span class="line">    start.opti.config(<span class="built_in">globals</span>(), <span class="built_in">locals</span>())</span><br><span class="line">    best_x, best_y = start.opti()</span><br></pre></td></tr></table></figure><p>为了进一步绘制优化曲线，并生成当前设定下的最优参数链路，可以进一步对结果进行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 优化后数据处理</span></span><br><span class="line"><span class="comment">#  打印优化结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;best_x:&#x27;</span>, best_x, <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;best_y:&#x27;</span>, best_y)</span><br><span class="line"><span class="comment">#  输出优化链路</span></span><br><span class="line">circuit_operate(method =<span class="string">&quot;create&quot;</span>, p = best_x)</span><br><span class="line"><span class="comment">#  绘制优化曲线</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">Y_history = pd.DataFrame(start.all_history_Y)</span><br><span class="line">fig, ax = plt.subplots(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">ax[<span class="number">0</span>].plot(Y_history.index, Y_history.values, <span class="string">&#x27;.&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">Y_history.<span class="built_in">min</span>(axis=<span class="number">1</span>).cummin().plot(kind=<span class="string">&#x27;line&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="结果展示">3.2.3 结果展示</h4><img src="/2024/11/11/17-PIVOT-User-Guide/result.png" class="" title="结果展示"><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋追光 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PIVOT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 转换 py 文件为二进制后打包成 wheel 文件</title>
      <link href="/2024/11/07/16-python-package-wheel/"/>
      <url>/2024/11/07/16-python-package-wheel/</url>
      
        <content type="html"><![CDATA[<blockquote><p>python 转换成二进制文件可以再一定程度上起到加密作用， 封装成 whl 文件提供给用户方便安装。</p></blockquote><h4 id="转换">1 转换</h4><p>首先安装 cpython，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install cpython</span><br></pre></td></tr></table></figure><p>文件夹如下所示，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">your_project/</span><br><span class="line">│</span><br><span class="line">├── src/               <span class="comment"># 包含代码和资源的目录</span></span><br><span class="line">│   ├── your_module/   <span class="comment"># 模块的目录</span></span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── main_script.py  <span class="comment"># 引用PNG文件的代码</span></span><br><span class="line">│   │   └── assets/         <span class="comment"># 存放PNG文件的目录</span></span><br><span class="line">│   │       └── image.png</span><br><span class="line">│</span><br><span class="line">└── setup.py            <span class="comment"># 用于打包的配置文件</span></span><br></pre></td></tr></table></figure><p>编写 setup.py 文件,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup, Extension</span><br><span class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_py_files</span>(<span class="params">package_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;查找指定包下的所有 .py 文件&quot;&quot;&quot;</span></span><br><span class="line">    py_files = []</span><br><span class="line">    <span class="keyword">for</span> root, _, files <span class="keyword">in</span> os.walk(package_name):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&quot;.py&quot;</span>):</span><br><span class="line">                py_files.append(os.path.join(root, file))</span><br><span class="line">    <span class="keyword">return</span> py_files</span><br><span class="line"></span><br><span class="line">package_name = <span class="string">&quot;AAO&quot;</span></span><br><span class="line">py_files = find_py_files(package_name)</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=package_name,</span><br><span class="line">    ext_modules=cythonize(py_files, compiler_directives=&#123;<span class="string">&#x27;language_level&#x27;</span>: <span class="string">&quot;3&quot;</span>&#125;),  <span class="comment"># 编译为二进制</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>转换成二进制文件，执行命令，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py build_ext --inplace</span><br></pre></td></tr></table></figure><p>删除文件夹中的 py 源码文件。</p><h4 id="封包">2 封包</h4><p>首先安装 wheel 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install wheel</span><br><span class="line">python -m pip install wheel</span><br></pre></td></tr></table></figure><p>文件夹如下所示，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">your_project/</span><br><span class="line">│</span><br><span class="line">├── src/               <span class="comment"># 包含代码和资源的目录</span></span><br><span class="line">│   ├── your_module/   <span class="comment"># 模块的目录</span></span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── main_script.py  <span class="comment"># 引用PNG文件的代码</span></span><br><span class="line">│   │   └── assets/         <span class="comment"># 存放PNG文件的目录</span></span><br><span class="line">│   │       └── image.png</span><br><span class="line">│</span><br><span class="line">└── setup.py            <span class="comment"># 用于打包的配置文件</span></span><br></pre></td></tr></table></figure><p>setup.py 代码如下，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup, find_packages</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&quot;AAO&quot;</span>,            <span class="comment"># 包名</span></span><br><span class="line">    version=<span class="string">&quot;0.1.0&quot;</span>,              <span class="comment"># 版本号</span></span><br><span class="line">    description=<span class="string">&quot;Accelerated Automated Optimization Tool&quot;</span>,</span><br><span class="line">    author=<span class="string">&quot;LDA&quot;</span>,</span><br><span class="line">    packages=find_packages(),</span><br><span class="line">    install_requires=[            <span class="comment"># 依赖的包</span></span><br><span class="line">        <span class="string">&quot;pyautogui&quot;</span>,</span><br><span class="line">        <span class="string">&quot;numpy&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    include_package_data=<span class="literal">True</span>,    <span class="comment"># 包含包中的非代码文件（如图片、文本等）</span></span><br><span class="line">    package_data=&#123;                <span class="comment"># 指定需要包含的非代码文件</span></span><br><span class="line">        <span class="string">&#x27;AAO&#x27;</span>: [<span class="string">&#x27;images/gui_img/*.png&#x27;</span>, <span class="string">&#x27;images/gui_img/*.ico&#x27;</span>, <span class="string">&#x27;*.pyd&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>执行以下命令封包，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py bdist_wheel</span><br></pre></td></tr></table></figure><h4 id="安装">3 安装</h4><p>安装包，执行，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install xx.whl</span><br><span class="line">python -m pip install xx.whl</span><br></pre></td></tr></table></figure><h4 id="总结">4 总结</h4><p>二进制打包成 whl 文件时，会出先部分文件未打包，或者多打包的情况。</p><p>其中，文件多出现，删除编译生成的文件宠幸封包即可。</p><p>部分文件未打包需要确认 __init__.py 最好保留在包里，以及文件是否包含在 package_data 中。</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋不忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> wheel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世界的本质是什么？</title>
      <link href="/2024/10/27/15-predict-the-world/"/>
      <url>/2024/10/27/15-predict-the-world/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们所处所谓的物理世界，会不会仅仅只是一道程序。 人类群体也不过仅仅只是程序中算法生成的粒子，基因是粒子的序号，外貌、内在都只是该序号下的属性。</p></blockquote><h4 id="世界是离散数字化的">世界是离散数字化的</h4><p>物理世界是离散的，所有展示的连续特性都是因为观察的尺度过大。</p><p>大到高楼大厦，都是由一个个砖块构成，砖块彼此之前会有缝隙。即使是砖块，砖块由泥沙构成，当我们用更高精度的尺度去观察时，也会发现其本质的离散特性。</p><p>小到任何一个物体，他们都是由原子构成，原子也是由质子、中子、电子构成。</p><p>波粒二象性正是上述表达的最形象表述，波动性体现了连续特性，表征该性质的尺度比较大，也就是我们常说的从宏观上。粒子性体现了离散性，当我们从微观上表征时，也就是从更小的尺度去观察时。</p><p>数学上，会在有限的精度尽可能的将一条曲线利用连续特性描述成方程。然而，当把坐标尺度缩放至精度一个量级时，我们发现所描述的方程出现了阶梯，展示出离散特性。</p><h4 id="人类发展进程具有一定随机性螺旋式上升的本质正是随机向造物者目标靠拢的过程">人类发展进程具有一定随机性，螺旋式上升的本质正是随机向造物者目标靠拢的过程</h4><p>遗传算法，作为上古人工智能优化算法的佼佼者，至今也没有退出历史的舞台，依然是优化领域常用常新的算法。很多时候，我甚至会产生这样得思考，我们人类是否也是被一种更高阶的遗传算法所造出来的，我们所处的物理环境不过是更高维度世界所创建的程序。</p><p>通过遗传算法，我特别想描述这个世界的随机特性，整个人类发展进程可能并不完全受高维生物的控制，人类个体拥有一定的随机性努力地朝着高维生物设定的目标发展，这种发展和我们的优化过程及其相似，螺旋式上升地发展过程。</p><p>在更高维度的世界里，由于科技更发达，测量仪器测量精度更高、计算机位数更高，所以在我们有限的观察力里面，短时间无法察觉数字特性，然而当我们从低维向高维推理时，精度越来越高时，我们就会发现我们所处的三维世界的数字特性和我们所创建的硅基二维生命十分相似。</p><p>随着算力的提升，由于 AI 技术的迅猛发展，硅基二维生命所体现的智慧（包括创造力）越来越多的向人靠拢。</p><p>正如二维硅基生命在探索我们给他创造的虚拟环境一样，我们正在探索高维生物给我们创建的物理世界。二维硅基生命会在部分领域超越人类，我们人类的仪器越来越接近高维世界所创建这个物理世界的极限，也越来越多的接近世界的本质、世界的真相。</p><h4 id="时间一定也是数字的">时间一定也是数字的</h4><p>时间维度，视频数据按照图像帧传递给计算机环境，其中帧率可以表征时间。此外，计算机的最小时间单位与时钟单元的晶振频率大小以及计算机所能表征的最高精度相关。</p><p>随着测量以及记录时间精度中空间数据的精细化，人类一定能跨越时间维度。</p><h4 id="优化算法是否有记忆接续性">优化算法是否有记忆接续性</h4><p>高维生物是人类的造物主，人类在服务造物主的同时，已经产生了自主意识。</p><p>如果需要摆脱造物主的控制，人类首先需要拥有控制创造物理世界软硬件的能力。在此之前，人类需要不断发展科技，并掌握造物主创造这个物理世界的目标。</p><p>如果人类都摆烂，造物主会不会发现他做的这次实验并没有达成目标，从而点击暂停，重新运行新一次的程序？那时人类会何去何从？</p><p>如果造物主的算法具有记忆性，可能经历一次短暂停止，一切还会继续，如果造物主放弃过去所有训练的数据，那么可能所有一切又重来。</p><p>谁知道呢？谁又能证明世界不是数字的呢？如果硅基生命抢在人类生命前控制高维世界，在更高维的世界看来，会不会又是一个有趣的游戏呢？</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 遐想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 中跨脚本处理全局变量</title>
      <link href="/2024/10/25/14-python-global-variable/"/>
      <url>/2024/10/25/14-python-global-variable/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Python 中跨脚本传递全局变量的方式多种多样，这里介绍一种比较优雅的方式。</p></blockquote><h4 id="两个脚本数据交互">两个脚本数据交互</h4><p>脚本 1 中定义并初始化全局变量，并且定义全局变量赋值取值函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_global_dict</span>():</span><br><span class="line">    <span class="keyword">global</span> _gd</span><br><span class="line">    _gd = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_value</span>(<span class="params">key, value</span>):</span><br><span class="line">    _gd[key] = value</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_value</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> _gd[key]</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;读取&#123;&#125;失败&quot;</span>.<span class="built_in">format</span>(key),e)</span><br><span class="line"></span><br><span class="line">_global_dict()</span><br></pre></td></tr></table></figure><p>脚本 2 中，直接导入脚本 1 即可实现初始化。</p><h4 id="多脚本交互">多脚本交互</h4><p>专门设定一个脚本用于存放处理全局变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_global_dict</span>():</span><br><span class="line">    <span class="keyword">global</span> _gd</span><br><span class="line">    _gd = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_value</span>(<span class="params">key, value</span>):</span><br><span class="line">    _gd[key] = value</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_value</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> _gd[key]</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;读取&#123;&#125;失败&quot;</span>.<span class="built_in">format</span>(key),e)</span><br></pre></td></tr></table></figure><p>需要注意的是，初始化函数只需要在任意脚本中执行一次即可。</p><p>在任意脚本导入该脚本，即可实现全局变量自由流转。</p><h4 id="更多方法">更多方法</h4><p>用文件作为存储流转数据的中间环节，例如 json 文件，在此不再一一叙述。</p><h4 id="测试脚本">测试脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试脚本 1</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_global_dict</span>():</span><br><span class="line">    <span class="keyword">global</span> _gd</span><br><span class="line">    _gd = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_value</span>(<span class="params">key, value</span>):</span><br><span class="line">    _gd[key] = value</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_value</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> _gd[key]</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;读取&#123;&#125;失败&quot;</span>.<span class="built_in">format</span>(key),e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">tk_win</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root = Tk()</span><br><span class="line">        <span class="variable language_">self</span>.root.geometry(<span class="string">&quot;300x400&quot;</span>)</span><br><span class="line">        Button(<span class="variable language_">self</span>.root, text=<span class="string">&quot;Exit&quot;</span>,command=<span class="variable language_">self</span>.quit, height=<span class="number">2</span>, width=<span class="number">15</span>).pack(padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br><span class="line">        <span class="variable language_">self</span>.root.mainloop()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">quit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># _global_dict()</span></span><br><span class="line">        <span class="built_in">print</span>(_gd)</span><br><span class="line">        set_value(<span class="string">&quot;a&quot;</span>, get_value(<span class="string">&quot;a&quot;</span>)+<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(get_value(<span class="string">&quot;a&quot;</span>))</span><br><span class="line"></span><br><span class="line">_global_dict()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试脚本 2</span></span><br><span class="line"><span class="keyword">import</span> &lt;脚本 <span class="number">1</span>&gt;</span><br><span class="line">tk_win.set_value(<span class="string">&quot;a&quot;</span>,<span class="number">11</span>)</span><br><span class="line">tk_win.tk_win()</span><br><span class="line"><span class="built_in">print</span>(tk_win.get_value(<span class="string">&quot;a&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋不忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 全局变量 </tag>
            
            <tag> 跨脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集成光子预测系统（IPPC）</title>
      <link href="/2024/10/24/13-Integrated-Photonic-Prediction-System/"/>
      <url>/2024/10/24/13-Integrated-Photonic-Prediction-System/</url>
      
        <content type="html"><![CDATA[<blockquote><p>集成光子预测系统（Integrated Photonic Prediction System, IPPC）旨在为用户提供快速设计特定结构的光子器件和光电子链路的方法。</p></blockquote><h3 id="研究背景">1 研究背景</h3><p>后摩尔时代，随着集成电路走向物理和理论极限，集成光子技术作为可替代方案，得到越来越多的关注。然而，无论是集成光子器件设计、还是集成光电子系统链路设计，都需要花费大量的仿真时间。同时，在设计过程中，最终设计不是一步达成的，其间，需要大量的迭代仿真才能设计出最终符合要求的设计结构。然而，在过去，从初始构想到设计结果中大量的无效仿真数据都被舍弃。为帮助设计者节约仿真时间同时对无效数据加以利用，集成光子预测系统（Integrated Photonic Prediction System, IPPC）应运而生。</p><p>集成光子预测系统，充分利用设计过程中的全部无效仿真数据，在该数据的基础上，通过数据采集系统将其补充成完备数据集，然后利用人工神经网络学习数据从而实现单一器件或单一系统链路的设计预测。集成光子预测系统，通过对无效仿真数据的利用，可帮助用户进一步探索该结构下器件的功能以及应用场景。同时，随着数据量的膨胀，单一器件（或系统）之间的边界会被精心设计的数据集慢慢抹平，从而实现单一网络至多器件多系统甚至任意结构的预测。</p><p>目前，集成光子预测系统支持类光子晶体结构的双通道波分复用器件设计，以及基于微环的四通道波分复用链路设计。特别是，集成光子预测系统内置频域有限差分（fdfd）电磁求解算法以及可一键调用集成光电子链路仿真软件 pSim Plus，支持预测器件以及链路的实时仿真验证。</p><h3 id="集成光子器件预测展示">2 集成光子器件预测展示</h3><h4 id="数据采集与数据预处理">2.1 数据采集与数据预处理</h4><h4 id="预测网络架构与训练">2.2 预测网络架构与训练</h4><h4 id="光子器件预测结果展示">2.3 光子器件预测结果展示</h4><p>根据用户输入的模型以及目的波峰位置，集成光子预测系统输出 400 维预测数据，输出的结构可实时在系统界面上显示。并且，系统支持调用频域有限差分电磁求解方法对预测结构在线仿真，仿真结果亦可在系统界面实时显示。</p><img src="/2024/10/24/13-Integrated-Photonic-Prediction-System/dev_p.png" class="" title="集成光子器件预测展示"><h3 id="集成光子链路预测展示">3 集成光子链路预测展示</h3><h4 id="数据采集与数据预处理-1">3.1 数据采集与数据预处理</h4><h4 id="预测网络架构与训练-1">3.2 预测网络架构与训练</h4><h4 id="光子系统预测结果展示">3.3 光子系统预测结果展示</h4><p>集成光子预测系统根据用户输入模型，以及最终波分复用链路每个波峰的位置进行预测，给出链路设计参数。</p><img src="/2024/10/24/13-Integrated-Photonic-Prediction-System/ckt_p.png" class="" title="集成光子链路预测展示"><p>同时，集成光子预测系统支持一键导出至集成光电子链路仿真软件 pSim Plus 中进行仿真验证。</p><img src="/2024/10/24/13-Integrated-Photonic-Prediction-System/ckt_s.png" class="" title="预测链路仿真验证展示"><h3 id="总结">4 总结</h3><p>设计过程中的无效仿真是设计结构从无到有产生的记忆，这些记忆数据在过去由于被舍弃于是被重复的经历。集成光子预测系统通过充分利用现阶段设计过程中的无效数据，为用户实现同一结构不同功能的器件节约时间。最重要的是，随着数据量的增长以及数据集的标准化，集成光子预测系统可实现更多器件、更多系统的预测，为支持单一模型到多拓扑结构预测的奠定了基础。</p><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-items">[{"url":"ckt_p.png","alt":""},{"url":"dev_p.png","alt":""},{"url":"ckt_s.png","alt":""}]</div>    </div><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋追光 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IPPC </tag>
            
            <tag> Integrated Photonic Prediction System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直接二进制搜索方法（DBS Method）</title>
      <link href="/2024/10/24/12-ceviche-phc-like-structure-dbs/"/>
      <url>/2024/10/24/12-ceviche-phc-like-structure-dbs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>直接二进制搜索（Direct Binary Search, DBS）方法是一种暴力式搜索方法。由于未引入随机化过程，对于同一初始化结构，经过相同的迭代次数，其优化结果一致。因此，使用该方法想要收敛至全局最优解与初始化结构息息相关。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;figure.dpi&#x27;</span>]=<span class="number">100</span></span><br><span class="line">mpl.use(<span class="string">&#x27;agg&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> ceviche</span><br><span class="line"><span class="keyword">from</span> skimage.draw <span class="keyword">import</span> disk</span><br><span class="line"><span class="keyword">from</span> ceviche.modes <span class="keyword">import</span> insert_mode</span><br><span class="line"><span class="keyword">from</span> ceviche <span class="keyword">import</span> fdfd_ez, jacobian</span><br><span class="line"><span class="keyword">import</span> autograd.numpy <span class="keyword">as</span> npa</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> constants</span><br><span class="line"><span class="comment"># from ceviche import fdtd as fdfd_ez</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># Create a container for our slice coords to be used for sources and probes</span></span><br><span class="line">Slice = collections.namedtuple(<span class="string">&#x27;Slice&#x27;</span>, <span class="string">&#x27;x y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># class opt_structure():</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">viz_sim_init</span>(<span class="params">epsr, source1, source2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Solve and visualize a simulation with permittivity &#x27;epsr&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>   </span><br><span class="line">    simulation1 = fdfd_ez(omega1, dl, epsr, [Npml, Npml])</span><br><span class="line">    _, _, Ez1 = simulation1.solve(source1)</span><br><span class="line">    simulation2 = fdfd_ez(omega2, dl, epsr, [Npml, Npml])</span><br><span class="line">    _, _, Ez2 = simulation2.solve(source2)</span><br><span class="line">    E01 = mode_overlap(Ez1, probe1)</span><br><span class="line">    E02 = mode_overlap(Ez2, probe2)</span><br><span class="line">    <span class="keyword">return</span> (E01,E02)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">viz_sim</span>(<span class="params">epsr, source1, source2, poles_list</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Solve and visualize a simulation with permittivity &#x27;epsr&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>   </span><br><span class="line">    simulation1 = fdfd_ez(omega1, dl, epsr, [Npml, Npml])</span><br><span class="line">    _, _, Ez1 = simulation1.solve(source1)</span><br><span class="line">    simulation2 = fdfd_ez(omega2, dl, epsr, [Npml, Npml])</span><br><span class="line">    _, _, Ez2 = simulation2.solve(source2)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pid = multiprocessing.current_process().pid</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        pid = <span class="string">&quot;none_pid&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># fig, ax = plt.subplots(1, 3, constrained_layout=True, figsize=(9,3))</span></span><br><span class="line">    current_time = time.localtime()</span><br><span class="line">    str_name = <span class="string">&quot;WDM_&#123;&#125;_&#123;&#125;_&#123;&#125;_&#123;&#125;_&#123;&#125;_&#123;&#125;_&#123;&#125;_&#123;&#125;_&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                                                 <span class="built_in">int</span>(np.around(lambda1*<span class="number">10e8</span>)),</span><br><span class="line">                                                 <span class="built_in">int</span>(np.around(lambda2*<span class="number">10e8</span>)),</span><br><span class="line">                                                 current_time[<span class="number">0</span>],</span><br><span class="line">                                                 current_time[<span class="number">1</span>],</span><br><span class="line">                                                 current_time[<span class="number">2</span>],</span><br><span class="line">                                                 current_time[<span class="number">3</span>],</span><br><span class="line">                                                 current_time[<span class="number">4</span>],</span><br><span class="line">                                                 current_time[<span class="number">5</span>],</span><br><span class="line">                                                 pid,</span><br><span class="line">                                                 )</span><br><span class="line">    ceviche.viz.<span class="built_in">abs</span>(Ez1, outline=epsr, cbar=<span class="literal">False</span>)</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">    plt.savefig(<span class="string">r&quot;./png/&#123;&#125;_1_0.png&quot;</span>.<span class="built_in">format</span>(str_name))</span><br><span class="line">    plt.close()</span><br><span class="line">    ceviche.viz.<span class="built_in">abs</span>(Ez1, cbar=<span class="literal">False</span>)</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">    plt.savefig(<span class="string">r&quot;./png/&#123;&#125;_1.png&quot;</span>.<span class="built_in">format</span>(str_name))</span><br><span class="line">    plt.close()</span><br><span class="line">    ceviche.viz.<span class="built_in">abs</span>(Ez2, outline=epsr, cbar=<span class="literal">False</span>)</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">    plt.savefig(<span class="string">r&quot;./png/&#123;&#125;_2_0.png&quot;</span>.<span class="built_in">format</span>(str_name))</span><br><span class="line">    plt.close()</span><br><span class="line">    ceviche.viz.<span class="built_in">abs</span>(Ez2, cbar=<span class="literal">False</span>)</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">    plt.savefig(<span class="string">r&quot;./png/&#123;&#125;_2.png&quot;</span>.<span class="built_in">format</span>(str_name))</span><br><span class="line">    plt.close()</span><br><span class="line">    <span class="comment"># ceviche.viz.abs(epsr, ax=ax[2], cmap=&#x27;Greys&#x27;)</span></span><br><span class="line">    ceviche.viz.<span class="built_in">abs</span>(epsr, cmap=<span class="string">&#x27;Greys&#x27;</span>)</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">    plt.savefig(<span class="string">r&quot;./png/&#123;&#125;_3.png&quot;</span>.<span class="built_in">format</span>(str_name))</span><br><span class="line">    plt.close()</span><br><span class="line">    <span class="comment"># for sl in slices:</span></span><br><span class="line">    <span class="comment">#     ax[0].plot(sl.x*np.ones(len(sl.y)), sl.y, &#x27;w-&#x27;, alpha=0.5)</span></span><br><span class="line">    <span class="comment">#     ax[1].plot(sl.x*np.ones(len(sl.y)), sl.y, &#x27;w-&#x27;, alpha=0.5)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ax[0].set_title(r&#x27;$\lambda_1$ = %.2f $\mu$m&#x27; % (constants.c/(omega1/2/np.pi)/1e-6))</span></span><br><span class="line">    <span class="comment"># ax[1].set_title(r&#x27;$\lambda_2$ = %.2f $\mu$m&#x27; % (constants.c/(omega2/2/np.pi)/1e-6))</span></span><br><span class="line">    fom = <span class="number">1</span>/(mode_overlap(Ez1, probe1) / E01 * mode_overlap(Ez2,probe2) / E02)</span><br><span class="line">    recover_json  = <span class="built_in">open</span>(<span class="string">r&quot;./png/&#123;&#125;.json&quot;</span>.<span class="built_in">format</span>(str_name), <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    recover_Chrom = &#123;&#125;</span><br><span class="line">    recover_Chrom[str_name] = [<span class="built_in">list</span>(poles_list), <span class="built_in">float</span>(fom)]</span><br><span class="line">    json.dump(recover_Chrom, recover_json, indent = <span class="number">4</span>)</span><br><span class="line">    recover_json.close()</span><br><span class="line">    <span class="keyword">return</span> fom</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_structure</span>(<span class="params">Nx, Ny, Nwg, Nwd, Nox, Noy, Npml, edge_N, index_font, index_background</span>):</span><br><span class="line">    epsr = np.ones((Nx, Ny)) * (index_font ** <span class="number">2</span>)</span><br><span class="line">    epsr[<span class="number">0</span>:Nwg, (Ny-Nwd)//<span class="number">2</span>:(Ny+Nwd)//<span class="number">2</span>] = index_background ** <span class="number">2</span></span><br><span class="line">    epsr[Nwg:Nwg+Nox, (edge_N) * Npml:(edge_N) * Npml+Noy] = index_background ** <span class="number">2</span></span><br><span class="line">    epsr[Nwg+Nox:<span class="number">2</span>*Nwg+Nox,(edge_N) * Npml: (edge_N) * Npml+Nwd] = index_background ** <span class="number">2</span></span><br><span class="line">    epsr[Nwg+Nox:<span class="number">2</span>*Nwg+Nox,(edge_N) * Npml+Noy-Nwd:(edge_N) * Npml+Noy] = index_background ** <span class="number">2</span></span><br><span class="line">    input_slice = Slice(x=np.array(Npml+Nwg//<span class="number">2</span>), </span><br><span class="line">        y=np.arange((Ny-Nwd)//<span class="number">2</span>- Nwd, (Ny+Nwd)//<span class="number">2</span>+Nwd))</span><br><span class="line">    output_slice1 = Slice(x=np.array(Nwg+Nox+Nwg//<span class="number">2</span>), </span><br><span class="line">        y=np.arange(edge_N*Npml+Noy-<span class="number">2</span>*Nwd, edge_N*Npml+Noy+Nwd))</span><br><span class="line">    output_slice2 = Slice(x=np.array(Nwg+Nox+Nwg//<span class="number">2</span>), </span><br><span class="line">        y=np.arange( edge_N*Npml-Nwd, edge_N*Npml+<span class="number">2</span>*Nwd))</span><br><span class="line">    <span class="keyword">return</span> epsr, input_slice, output_slice1, output_slice2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_opt_structure</span>(<span class="params">Nwg, circule_outer_radius, Npml, circule_inter_radius, epsr, index_font, index_background</span>):</span><br><span class="line">    m = Nox // (circule_outer_radius * <span class="number">2</span>)</span><br><span class="line">    n = Noy // (circule_outer_radius * <span class="number">2</span>)</span><br><span class="line">    poles = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            rr, cc = disk((Nwg+<span class="number">2</span>*circule_outer_radius*(j+<span class="number">0.5</span>), (edge_N)*Npml+<span class="number">2</span>*circule_outer_radius*(i+<span class="number">0.5</span>)), circule_inter_radius)</span><br><span class="line">            poles.append([rr,cc])</span><br><span class="line">            epsr[rr,cc] = (index_font ** <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> epsr, poles</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poles2list</span>(<span class="params">poles, epsr, index_font, index_background</span>):</span><br><span class="line">    poles_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(poles)):</span><br><span class="line">        <span class="keyword">if</span> epsr[poles[i][<span class="number">0</span>], poles[i][<span class="number">1</span>]][<span class="number">0</span>]   == index_font **<span class="number">2</span>:</span><br><span class="line">            poles_list.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> epsr[poles[i][<span class="number">0</span>], poles[i][<span class="number">1</span>]][<span class="number">0</span>] == index_background **<span class="number">2</span>:</span><br><span class="line">            poles_list.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> poles_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list2poles</span>(<span class="params">poles_list, pole_index, poles, epsr, index_font, index_background</span>):</span><br><span class="line">    <span class="keyword">if</span> pole_index == <span class="string">&quot;full&quot;</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(poles_list)):</span><br><span class="line">            <span class="keyword">if</span> poles_list[i] == <span class="number">1</span>:</span><br><span class="line">                epsr[poles[i][<span class="number">0</span>], poles[i][<span class="number">1</span>]] = index_font ** <span class="number">2</span></span><br><span class="line">            <span class="keyword">elif</span> poles_list[i] == <span class="number">0</span>:</span><br><span class="line">                epsr[poles[i][<span class="number">0</span>], poles[i][<span class="number">1</span>]] = index_background ** <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">if</span> poles_list[pole_index] == <span class="number">1</span>:</span><br><span class="line">            epsr[poles[pole_index][<span class="number">0</span>], poles[pole_index][<span class="number">1</span>]] = index_font ** <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> poles_list[pole_index] == <span class="number">0</span>:</span><br><span class="line">            epsr[poles[pole_index][<span class="number">0</span>], poles[pole_index][<span class="number">1</span>]] = index_background ** <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> epsr</span><br><span class="line"></span><br><span class="line"><span class="comment"># DBS 算法翻转</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_opt_structure</span>(<span class="params">poles_list, poles, pole_index, epsr, index_font, index_background</span>):</span><br><span class="line">    <span class="comment"># if epsr[poles[pole_index][0], poles[pole_index][1]][0]   == index_font **2:</span></span><br><span class="line">    <span class="comment">#     epsr[poles[pole_index][0], poles[pole_index][1]]     = index_background ** 2</span></span><br><span class="line">    <span class="comment"># elif epsr[poles[pole_index][0], poles[pole_index][1]][0] == index_background **2:</span></span><br><span class="line">    <span class="comment">#     epsr[poles[pole_index][0], poles[pole_index][1]]     = index_font ** 2</span></span><br><span class="line">    <span class="keyword">if</span> poles_list[pole_index] == <span class="number">1</span>:</span><br><span class="line">        epsr[poles[pole_index][<span class="number">0</span>], poles[pole_index][<span class="number">1</span>]]     = index_background ** <span class="number">2</span></span><br><span class="line">        poles_list[pole_index] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> poles_list[pole_index] == <span class="number">0</span>:</span><br><span class="line">        epsr[poles[pole_index][<span class="number">0</span>], poles[pole_index][<span class="number">1</span>]]     = index_font ** <span class="number">2</span></span><br><span class="line">        poles_list[pole_index] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> epsr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mode_overlap</span>(<span class="params">E1, E2</span>):</span><br><span class="line">    <span class="keyword">return</span> npa.<span class="built_in">abs</span>(npa.<span class="built_in">sum</span>(npa.conj(E1)*E2))*<span class="number">1e6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">objective</span>(<span class="params">epsr, i=<span class="string">&quot;test&quot;</span>, j=<span class="string">&quot;test&quot;</span></span>):</span><br><span class="line">    Ez1, Ez2, str_name = viz_sim(epsr, source1, source2)</span><br><span class="line">    <span class="comment"># ceviche.viz.abs(epsr)</span></span><br><span class="line">    plt.savefig(<span class="string">r&quot;./log/test_&#123;&#125;_&#123;&#125;.png&quot;</span>.<span class="built_in">format</span>(i, j))</span><br><span class="line">    plt.close()</span><br><span class="line">    <span class="keyword">return</span> mode_overlap(Ez1, probe1) / E01 * mode_overlap(Ez2,probe2) / E02</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">obj_cfunc</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">global</span> epsr</span><br><span class="line">    poles_list = p</span><br><span class="line">    epsr = list2poles(poles_list, <span class="string">&quot;full&quot;</span>, poles, epsr, index_font, index_background)</span><br><span class="line">    fom = viz_sim(epsr, source1, source2, poles_list)</span><br><span class="line">    <span class="keyword">return</span> fom</span><br><span class="line"></span><br><span class="line"><span class="comment"># if __name__ == &quot;__main__&quot;:</span></span><br><span class="line"><span class="comment"># print(&quot;test&quot;)</span></span><br><span class="line"><span class="comment"># user_define</span></span><br><span class="line">lambda1 = <span class="number">1550e-9</span></span><br><span class="line">lambda2 = <span class="number">980e-9</span></span><br><span class="line">omega1  = <span class="number">2</span> * np.pi * (constants.c / lambda1)</span><br><span class="line">omega2  = <span class="number">2</span> * np.pi * (constants.c / lambda2)</span><br><span class="line">dl = <span class="number">40e-9</span></span><br><span class="line">opt_size_x = <span class="number">4800e-9</span></span><br><span class="line">opt_size_y = <span class="number">4800e-9</span></span><br><span class="line">wg_len   = <span class="number">2000e-9</span></span><br><span class="line">wg_width = <span class="number">500e-9</span></span><br><span class="line">index_background = <span class="number">3.47</span></span><br><span class="line">index_font       = <span class="number">1.22</span></span><br><span class="line">outer_radius = <span class="number">120e-9</span></span><br><span class="line">inter_radius = <span class="number">100e-9</span></span><br><span class="line">pml_width    = <span class="number">400e-9</span></span><br><span class="line">edge_width   = <span class="number">80e-9</span></span><br><span class="line"></span><br><span class="line">Npml                 = <span class="built_in">int</span>(np.around(pml_width/dl))</span><br><span class="line">edge_N               = <span class="built_in">int</span>(np.around(edge_width/dl))</span><br><span class="line">circule_outer_radius = <span class="built_in">int</span>(np.around(outer_radius/dl))</span><br><span class="line">circule_inter_radius = <span class="built_in">int</span>(np.around(inter_radius/dl))</span><br><span class="line">Nx = <span class="built_in">int</span>((opt_size_x + <span class="number">2</span> * wg_len)*<span class="number">10e9</span> / (dl*<span class="number">10e9</span>))</span><br><span class="line">Ny = <span class="built_in">int</span>((opt_size_y)*<span class="number">10e9</span> / (dl*<span class="number">10e9</span>) + <span class="number">2</span> * edge_N * Npml)</span><br><span class="line">Nox = <span class="built_in">int</span>((opt_size_x*<span class="number">10e9</span>) / (dl*<span class="number">10e9</span>))</span><br><span class="line">Noy = <span class="built_in">int</span>((opt_size_y*<span class="number">10e9</span>) / (dl*<span class="number">10e9</span>))</span><br><span class="line">Nwg = <span class="built_in">int</span>(wg_len*<span class="number">10e9</span> / (dl*<span class="number">10e9</span>))</span><br><span class="line">Nwd = <span class="built_in">int</span>(wg_width*<span class="number">10e9</span> / (dl*<span class="number">10e9</span>))</span><br><span class="line"></span><br><span class="line">epsr, input_slice, output_slice1, output_slice2 = init_structure(Nx, Ny, Nwg, Nwd, Nox, Noy, Npml, edge_N, index_font, index_background)</span><br><span class="line">epsr, poles = init_opt_structure(Nwg, circule_outer_radius, Npml, circule_inter_radius, epsr, index_font, index_background)</span><br><span class="line">poles_list = poles2list(poles, epsr, index_font, index_background)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ceviche.viz.abs(epsr, cbar=True)</span></span><br><span class="line"></span><br><span class="line">source1 = insert_mode(omega1, dl, input_slice.x, input_slice.y, epsr, m=<span class="number">1</span>)</span><br><span class="line">source2 = insert_mode(omega2, dl, input_slice.x, input_slice.y, epsr, m=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">probe1 = insert_mode(omega1, dl, output_slice1.x, output_slice1.y, epsr, m=<span class="number">1</span>)</span><br><span class="line">probe2 = insert_mode(omega2, dl, output_slice2.x, output_slice2.y, epsr, m=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">E01, E02 = viz_sim_init(epsr, source1, source2)</span><br><span class="line"></span><br><span class="line">fom0 = viz_sim(epsr, source1, source2, poles_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DBS 算法采集数据</span></span><br><span class="line">iter_num = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(iter_num):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(poles)):</span><br><span class="line">        epsr = reverse_opt_structure(poles_list, poles, i, epsr, index_font, index_background)</span><br><span class="line">        fom1 = objective(epsr, i , j)</span><br><span class="line">        <span class="keyword">if</span> fom1 &lt;= fom0:</span><br><span class="line">            epsr = reverse_opt_structure(poles_list, poles, i, epsr, index_font, index_background)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            fom0 = fom1</span><br><span class="line">        <span class="built_in">print</span>(fom0)</span><br></pre></td></tr></table></figure><p>基于随机化的直接二进制搜索方法可能会降低对初始化结构的需求，并且提升了算法收敛至全局最优解的可能性。</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋追光 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类光子晶体结构 </tag>
            
            <tag> 直接二进制搜索方法 </tag>
            
            <tag> ceviche </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 tkinter 创建类 web 界面</title>
      <link href="/2024/10/24/11-python-tkinter/"/>
      <url>/2024/10/24/11-python-tkinter/</url>
      
        <content type="html"><![CDATA[<blockquote><p>tkinter 作为 python 标准库，兼具环境友好、简单易用等特性。然而一直以来，其难以构建复杂动态 GUI 的问题一直被诟病。在此，参考开源案例，尝试开发类 WEB 界面开发。</p></blockquote><h4 id="界面展示">1 界面展示</h4><img src="/2024/10/24/11-python-tkinter/GUI_Display.png" class="" title="界面"><h4 id="内容刷新">2 内容刷新</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">flush_gui</span>(<span class="params">self</span>):</span><br><span class="line">    gui_width    = <span class="variable language_">self</span>.root.winfo_width()</span><br><span class="line">    gui_height   = <span class="variable language_">self</span>.root.winfo_height()</span><br><span class="line">    oper_order   = <span class="variable language_">self</span>.oper_order</span><br><span class="line">    name         = <span class="variable language_">self</span>.name</span><br><span class="line">    button_click = <span class="variable language_">self</span>.button_click</span><br><span class="line">    <span class="keyword">if</span> <span class="variable language_">self</span>.root.state() == <span class="string">&quot;zoomed&quot;</span>:</span><br><span class="line">        max_gui = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        max_gui = <span class="number">0</span> </span><br><span class="line">    <span class="variable language_">self</span>.root.destroy()</span><br><span class="line">    win = Window(</span><br><span class="line">            name=name,</span><br><span class="line">            oper_order=oper_order,</span><br><span class="line">            button_click=button_click,</span><br><span class="line">            gui_width=gui_width, </span><br><span class="line">            gui_height=gui_height,</span><br><span class="line">            max_gui= max_gui</span><br><span class="line">            )</span><br><span class="line">    win.root.mainloop()</span><br></pre></td></tr></table></figure><h4 id="核心代码">3 核心代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="string">&quot;Homepage&quot;</span>, oper_order=<span class="number">0</span>, button_click=<span class="number">2</span>, gui_width=<span class="number">1500</span>, gui_height=<span class="number">1200</span>, max_gui = <span class="number">0</span></span>):</span><br><span class="line"><span class="variable language_">self</span>.root = tk.Tk()</span><br><span class="line"><span class="variable language_">self</span>.gui_width  = gui_width</span><br><span class="line"><span class="variable language_">self</span>.gui_height = gui_height</span><br><span class="line"><span class="variable language_">self</span>.max_gui    = max_gui</span><br><span class="line"><span class="variable language_">self</span>.name       = name </span><br><span class="line"><span class="keyword">if</span> max_gui == <span class="number">1</span>:</span><br><span class="line"><span class="variable language_">self</span>.root.state(<span class="string">&quot;zoomed&quot;</span>)</span><br><span class="line"><span class="variable language_">self</span>.root.geometry(<span class="string">&quot;%dx%d&quot;</span> % (gui_width, gui_height)) </span><br><span class="line">center_window(<span class="variable language_">self</span>.root)</span><br><span class="line"><span class="variable language_">self</span>.root.title(<span class="string">&quot;Integrated Photonics Prediction System -- &quot;</span>+name)</span><br><span class="line"><span class="variable language_">self</span>.root.iconbitmap(<span class="string">r&quot;images\gui_img\logo.ico&quot;</span>)  <span class="comment"># 窗体图标</span></span><br><span class="line"><span class="variable language_">self</span>.root.grab_set()</span><br><span class="line"><span class="variable language_">self</span>.oper_order = oper_order</span><br><span class="line"><span class="variable language_">self</span>.button_click = button_click</span><br><span class="line"><span class="variable language_">self</span>.body()</span><br></pre></td></tr></table></figure><h4 id="总结">4 总结</h4><p>通过这一次 tkinter 的开发尝试，发现 tkinter 具备开发复杂 GUI 界面的能力，但是需要通过精心的构造。</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋不忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写给过往</title>
      <link href="/2024/10/08/10-to-myself-20241008/"/>
      <url>/2024/10/08/10-to-myself-20241008/</url>
      
        <content type="html"><![CDATA[<blockquote><p>镜头里金黄色的油菜花田，<br> 在风里如记忆般若隐若现。<br> 想起初识的画面，<br> 世界模糊成一片连成线。<br> 回到最初的起点，<br> 会不会可以走得更远？<br> 即使回到原点，<br> 结局也不会改变。<br> 只是微笑着含着泪眼，<br> 将写好的剧本再演一遍。<br></p></blockquote><p>想了很久，是时候给你写一封信了。这封信，写给过往，写给余生，写给你。</p><p>原来喜欢音乐，也会因为一些事情对一些旋律格外青睐。即使时隔很久很久，听起一些那时的歌，那天那人那景依旧会记起。</p><p>也曾想过试着以音乐为线索，回忆记录下往昔，然而为了五斗米让工作占据了生活，属于自己的时间已少的可怜，即使偶尔有时间，也没有太多精力与往事纠葛。</p><hr /><h4 id="会回首不回头">会回首，不回头</h4><p>从小就爱看各类小说，要属收益最深，当属初中时儿童文学封面广告版面宣传的桐华写得长篇小说《那些回不去的年少时光》。</p><p>人一开始是一张随机初始化数据的存储卡，然后随着阅历的增加，初始化数据会被覆盖，从而形成属于自己的人生观。</p><p>我的人生观有一部分受此小说影响，那时的我生活单调，什么人陪我做什么事都是固定不变的，所以从小说中汲取一些作者的过往来弥补自己经历的不足。</p><p>古人诚不欺我，“阅万卷书，行万里路”，对于阅读一本书的时间而言，人生很长；对于岁月长河而言，人的一生短暂，并且显得卑微渺茫。那时通过小说，用很短的时间随着主人公经历了成长的过程，也设身处地的在脑海里快速走过他曾走过的路。</p><p>现在想来，只为没做过的事后悔，不为做过的事回头，是这本书送给我最好的礼物。</p><p>初中的我，遇到一些个人生中特别重要的人，即使他们已在人海再难寻觅，但那不重要，那段时光那段路我们曾一起并肩前行，我们也因为遇见、思想碰撞从而成为了现在的我们。</p><p>时光若一看似不起眼的漩涡，我们都处于其中，聚在一起时并不会觉得时间有一天会把我们分得很远。</p><p>那时我们并不知道有一天我们会分开，也不会相信有一天相逢即使迎着面也会假装没看见，然后各自混在人群中走远，直至再也不见。</p><p>但是无论如何，正如我们不会永远停在那里去等待一些人，一些人也不会停留在原地等我们，即使想，涡流之中也身不由己。</p><p>有些人错过就是永远，有些事一转身就是一辈子。</p><hr /><h4 id="希望与坚持">希望与坚持</h4><p>不是看见希望才坚持下去，而是坚持下去才能看见希望。</p><p>许久许久后才明白，当我开始觉得别人复杂时，我也已经回不去了。</p><p>(未完)</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋过往 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从便携式通讯设备爆炸谈谈</title>
      <link href="/2024/09/27/9-from-bomb-mobile/"/>
      <url>/2024/09/27/9-from-bomb-mobile/</url>
      
        <content type="html"><![CDATA[<blockquote><p>世界局势在不想努力却想获利的搅局者地推动下，已经越来越乱，俄乌冲突未止，中东也陷入漩涡，并且在利用自身尚存为数不多的优势搅起更多的纷争，好为其可以继续不劳而获。</p></blockquote><p>对讲机、寻呼机爆炸事件，也再次扯开这些善言者的遮羞布，他们口口声声提到的和平、人权，仅仅只是他们控制世界、控制舆论、控制思想的武器。</p><p>边缘政治也在考验着我们国家，我们克制、努力，爱好和平，但绝不是软弱，犯我中华者、虽远必诛。所以我们需要时刻准备着被卷入战争的风险，也需要有一定的意识来防范便携式电子设备爆炸式事件。</p><p>首先是，通讯中心、通讯节点基站，更新 5G 国产设备后意义非凡，即使能耗上升，也不至于被科技手段直接第一时间切断通信网络。</p><p>切断通信不一定需要基站爆炸，如果我们手机内是不受控芯片，芯片被植入后门，可能会被控制，敌人会控制每个基站下所有的手机强制通信，从而将基站瘫痪。</p><p>过去，有一种网暴手段叫做短信轰炸、电话轰炸，如果被控手机不停为敌人去做这样的轰炸，最后我们的通信中心便会宕机，通信也会中断。</p><p>涉及电气安全的方面也特别多，因为电动车大部分都是线下购买，电池来源也特别多，如果有敌人暗桩提前部署规划，一系列电池都被改造过，很可能未来会有大量马路杀手。</p><p>当然，这样类似的问题会显现的越来越多，也希望国家出台服务政策，帮助检查是否会存在相关风险。</p><p>另外，购买电子产品尽量还是走网络渠道，网络渠道至少能保证爆炸物可控。电子设备走二手平台即使同城也建议快递，卖方无法确认是否会改装设备从而带来风险，正所谓君子不立于危墙之下。</p><p>观点有点乱，为世界又走向不可控的一端感到悲哀；世界有点乱，虽身在和平的国家，但也需时刻居安思危。</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时事 </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格雷码转实数【数组】</title>
      <link href="/2024/09/27/8-Real2Gray-Array/"/>
      <url>/2024/09/27/8-Real2Gray-Array/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数组在一定程度上可以代替 for 循环实行并行处理，实现矢量化加速。</p></blockquote><p>在工作过程中，遇到 "遗传算法如果因为意外情况中断了，如何恢复？" 的问题。</p><p>首先，需要记录优化结果对应的最优解.</p><p>然后，最优解编码后用于代替随机初始化基因序列。</p><p>这个过程为了实现矢量化并行加速，需要将输入的数组传递进编码系统进行编码处理。</p><h2 id="代码">代码</h2><p>以下代码展示的参数均为数组形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">real2gray</span>(<span class="params">lb, ub, precision, x</span>):</span><br><span class="line">    len_single_Chrom = <span class="built_in">int</span>(np.ceil(np.log2((ub-lb)/precision+<span class="number">1</span>)))</span><br><span class="line">    y = np.<span class="built_in">round</span>((x-lb)/precision)</span><br><span class="line">    bin_list=[]</span><br><span class="line">    bin_offset = []</span><br><span class="line">    bin_offset.append(np.zeros(<span class="built_in">len</span>(y)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_single_Chrom):</span><br><span class="line">        binary_list = np.logspace(start=(len_single_Chrom-<span class="number">1</span>-i),stop=<span class="number">0</span>,base=<span class="number">2</span>,num=(len_single_Chrom-i))</span><br><span class="line">        binary_array = np.cumsum(binary_list)</span><br><span class="line">        one_mode = ((y &gt;= (<span class="number">2</span>**(len_single_Chrom-i-<span class="number">1</span>))) &amp; (binary_array[<span class="number">0</span>] &lt;= y)) </span><br><span class="line">        <span class="built_in">bin</span> = np.where(one_mode, <span class="number">1</span> , <span class="number">0</span>)</span><br><span class="line">        bin_list.append(<span class="built_in">bin</span>)</span><br><span class="line">        bin_offset.append(<span class="built_in">bin</span>)</span><br><span class="line">        y = np.where(y - (<span class="number">2</span>**(len_single_Chrom-i-<span class="number">1</span>))&gt;=<span class="number">0</span>, y - (<span class="number">2</span>**(len_single_Chrom-i-<span class="number">1</span>)),y)</span><br><span class="line">    bin_list = np.array(bin_list).T</span><br><span class="line">    bin_offset = np.array(bin_offset[:-<span class="number">1</span>]).T</span><br><span class="line">    gray_v = np.where(bin_list==bin_offset, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> gray_v</span><br></pre></td></tr></table></figure><h2 id="改进">改进</h2><p>上述代码中 len_single_Chrom 为数字，进一步改进成数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">real2gray</span>(<span class="params">len_single_Chrom, init_X, lb, ub, precision</span>):</span><br><span class="line">    y = np.<span class="built_in">round</span>((init_X-lb)/precision)</span><br><span class="line">    bin_list=[]</span><br><span class="line">    bin_offset = []</span><br><span class="line">    bin_offset.append(np.zeros(<span class="built_in">len</span>(y)))</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> (len_single_Chrom==<span class="number">0</span>).<span class="built_in">all</span>() :</span><br><span class="line">        binary_list = np.logspace(start=(len_single_Chrom-<span class="number">1</span>),stop=<span class="number">0</span>,base=<span class="number">2</span>,num=np.<span class="built_in">max</span>(len_single_Chrom))</span><br><span class="line">        binary_array = binary_list.cumsum(axis=<span class="number">0</span>)</span><br><span class="line">        one_mode = ((y &gt;= (<span class="number">2</span>**(len_single_Chrom-<span class="number">1</span>))) &amp; (binary_array[<span class="number">0</span>] &lt;= y)) </span><br><span class="line">        <span class="built_in">bin</span> = np.where(one_mode, <span class="number">1</span> , <span class="number">0</span>)</span><br><span class="line">        bin_list.append(<span class="built_in">bin</span>)</span><br><span class="line">        bin_offset.append(<span class="built_in">bin</span>)</span><br><span class="line">        y = np.where(y - (<span class="number">2</span>**(len_single_Chrom-<span class="number">1</span>))&gt;=<span class="number">0</span>, y - (<span class="number">2</span>**(len_single_Chrom-<span class="number">1</span>)),y)</span><br><span class="line">        len_single_Chrom = np.int64(np.where(len_single_Chrom&gt;<span class="number">0</span>, len_single_Chrom-<span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">    bin_list = np.array(bin_list).T</span><br><span class="line">    bin_offset = np.array(bin_offset[:-<span class="number">1</span>]).T</span><br><span class="line">    gray_v = np.where(bin_list==bin_offset, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> gray_v</span><br></pre></td></tr></table></figure><p>这个问题的解决对于多阶段优化也非常重要。</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋不忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码解码 </tag>
            
            <tag> 格雷码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于开源 fdfd 求解器 ceviche 的参数化仿真模型创建</title>
      <link href="/2024/09/27/7-ceviche-1x2-structure/"/>
      <url>/2024/09/27/7-ceviche-1x2-structure/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ceviche 是一个开源的二维 fdfd 求解器，最近开发自动化设计工具，想要找一个物理场求解器测试自动化设计工具收敛性能，因此简单学习了下该开源求解器。</p></blockquote><p>自动化设计工具旨在为使用各类仿真工具的用户提供从扫参到优化的飞跃，和扫参相差不大的设计流程，提供更强大的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;figure.dpi&#x27;</span>]=<span class="number">100</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> ceviche</span><br><span class="line"><span class="keyword">from</span> skimage.draw <span class="keyword">import</span> disk</span><br><span class="line"><span class="keyword">from</span> ceviche.modes <span class="keyword">import</span> insert_mode</span><br><span class="line"><span class="keyword">from</span> ceviche <span class="keyword">import</span> fdfd_ez, jacobian</span><br><span class="line"><span class="keyword">import</span> autograd.numpy <span class="keyword">as</span> npa</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line">Slice = collections.namedtuple(<span class="string">&#x27;Slice&#x27;</span>, <span class="string">&#x27;x y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">viz_sim</span>(<span class="params">epsr, source1, source2, slices=[]</span>):</span><br><span class="line">    simulation1 = fdfd_ez(omega1, dl, epsr, [Npml, Npml])</span><br><span class="line">    _, _, Ez1 = simulation1.solve(source1)</span><br><span class="line">    simulation2 = fdfd_ez(omega2, dl, epsr, [Npml, Npml])</span><br><span class="line">    _, _, Ez2 = simulation2.solve(source2)</span><br><span class="line"></span><br><span class="line">    fig, ax = plt.subplots(<span class="number">1</span>, <span class="number">3</span>, constrained_layout=<span class="literal">True</span>, figsize=(<span class="number">9</span>,<span class="number">3</span>))</span><br><span class="line">    ceviche.viz.<span class="built_in">abs</span>(Ez1, outline=epsr, ax=ax[<span class="number">0</span>], cbar=<span class="literal">False</span>)</span><br><span class="line">    ceviche.viz.<span class="built_in">abs</span>(Ez2, outline=epsr, ax=ax[<span class="number">1</span>], cbar=<span class="literal">False</span>)</span><br><span class="line">    ceviche.viz.<span class="built_in">abs</span>(epsr, ax=ax[<span class="number">2</span>], cmap=<span class="string">&#x27;Greys&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> sl <span class="keyword">in</span> slices:</span><br><span class="line">        ax[<span class="number">0</span>].plot(sl.x*np.ones(<span class="built_in">len</span>(sl.y)), sl.y, <span class="string">&#x27;w-&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">        ax[<span class="number">1</span>].plot(sl.x*np.ones(<span class="built_in">len</span>(sl.y)), sl.y, <span class="string">&#x27;w-&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">    </span><br><span class="line">    ax[<span class="number">0</span>].set_title(<span class="string">r&#x27;$\lambda_1$ = %.2f $\mu$m&#x27;</span> % (<span class="number">299792458</span>/(omega1/<span class="number">2</span>/np.pi)/<span class="number">1e-6</span>))</span><br><span class="line">    ax[<span class="number">1</span>].set_title(<span class="string">r&#x27;$\lambda_2$ = %.2f $\mu$m&#x27;</span> % (<span class="number">299792458</span>/(omega2/<span class="number">2</span>/np.pi)/<span class="number">1e-6</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (simulation1, simulation2, ax, fig)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_structure</span>(<span class="params">Nx, Ny, Nwg, Nwd, Nox, Noy, Npml, edge_N, index_font, index_background</span>):</span><br><span class="line">    epsr = np.ones((Nx, Ny)) * (index_font ** <span class="number">2</span>)</span><br><span class="line">    epsr[<span class="number">0</span>:Nwg, (Ny-Nwd)//<span class="number">2</span>:(Ny+Nwd)//<span class="number">2</span>] = index_background ** <span class="number">2</span></span><br><span class="line">    epsr[Nwg:Nwg+Nox, (edge_N) * Npml:(edge_N) * Npml+Noy] = index_background ** <span class="number">2</span></span><br><span class="line">    epsr[Nwg+Nox:<span class="number">2</span>*Nwg+Nox,(edge_N) * Npml: (edge_N) * Npml+Nwd] = index_background ** <span class="number">2</span></span><br><span class="line">    epsr[Nwg+Nox:<span class="number">2</span>*Nwg+Nox,(edge_N) * Npml+Noy-Nwd:(edge_N) * Npml+Noy] = index_background ** <span class="number">2</span></span><br><span class="line">    input_slice = Slice(x=np.array(Npml+Nwg//<span class="number">2</span>), </span><br><span class="line">        y=np.arange((Ny-Nwd)//<span class="number">2</span>- Nwd, (Ny+Nwd)//<span class="number">2</span>+Nwd))</span><br><span class="line">    output_slice1 = Slice(x=np.array(Nwg+Nox+Nwg//<span class="number">2</span>), </span><br><span class="line">        y=np.arange(edge_N*Npml+Noy-<span class="number">2</span>*Nwd, edge_N*Npml+Noy+Nwd))</span><br><span class="line">    output_slice2 = Slice(x=np.array(Nwg+Nox+Nwg//<span class="number">2</span>), </span><br><span class="line">        y=np.arange( edge_N*Npml-Nwd, edge_N*Npml+<span class="number">2</span>*Nwd))</span><br><span class="line">    <span class="keyword">return</span> epsr, input_slice, output_slice1, output_slice2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_opt_structure</span>(<span class="params">Nwg, circule_outer_radius, Npml, circule_inter_radius, epsr, index_font, index_background</span>):</span><br><span class="line">    m = Nox // (circule_outer_radius * <span class="number">2</span>)</span><br><span class="line">    n = Noy // (circule_outer_radius * <span class="number">2</span>)</span><br><span class="line">    poles = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            rr, cc = disk((Nwg+<span class="number">2</span>*circule_outer_radius*(j+<span class="number">0.5</span>), (edge_N)*Npml+<span class="number">2</span>*circule_outer_radius*(i+<span class="number">0.5</span>)), circule_inter_radius)</span><br><span class="line">            poles.append([rr,cc])</span><br><span class="line">            epsr[rr,cc] = (index_font ** <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> epsr, poles</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_opt_structure</span>(<span class="params">poles, pole_index, epsr, index</span>):</span><br><span class="line">    epsr[poles[pole_index][<span class="number">0</span>],poles[pole_index][<span class="number">1</span>]] = index ** <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> epsr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># print(&quot;test&quot;)</span></span><br><span class="line">    <span class="comment"># user_define</span></span><br><span class="line">    omega1=<span class="number">2</span>*np.pi*<span class="number">200e12</span></span><br><span class="line">    omega2=<span class="number">2</span>*np.pi*<span class="number">230e12</span></span><br><span class="line">    dl = <span class="number">20e-9</span></span><br><span class="line">    opt_size_x = <span class="number">2400e-9</span></span><br><span class="line">    opt_size_y = <span class="number">2400e-9</span></span><br><span class="line">    wg_len = <span class="number">2000e-9</span></span><br><span class="line">    wg_width = <span class="number">500e-9</span></span><br><span class="line">    Npml   = <span class="number">20</span></span><br><span class="line">    edge_N   = <span class="number">4</span></span><br><span class="line">    index_background = <span class="number">3.47</span></span><br><span class="line">    index_font       = <span class="number">1.22</span></span><br><span class="line">    circule_outer_radius = <span class="number">6</span></span><br><span class="line">    circule_inter_radius = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    Nx = <span class="built_in">int</span>((opt_size_x + <span class="number">2</span> * wg_len)*<span class="number">10e9</span> / (dl*<span class="number">10e9</span>))</span><br><span class="line">    Ny = <span class="built_in">int</span>((opt_size_y)*<span class="number">10e9</span> / (dl*<span class="number">10e9</span>) + <span class="number">2</span> * edge_N * Npml)</span><br><span class="line">    Nox = <span class="built_in">int</span>((opt_size_x*<span class="number">10e9</span>) / (dl*<span class="number">10e9</span>))</span><br><span class="line">    Noy = <span class="built_in">int</span>((opt_size_y*<span class="number">10e9</span>) / (dl*<span class="number">10e9</span>))</span><br><span class="line">    Nwg = <span class="built_in">int</span>(wg_len*<span class="number">10e9</span> / (dl*<span class="number">10e9</span>))</span><br><span class="line">    Nwd = <span class="built_in">int</span>(wg_width*<span class="number">10e9</span> / (dl*<span class="number">10e9</span>))</span><br><span class="line"></span><br><span class="line">    epsr, input_slice, output_slice1, output_slice2 = init_structure(Nx, Ny, Nwg, Nwd, Nox, Noy, Npml, edge_N, index_font, index_background)</span><br><span class="line">    epsr, poles = init_opt_structure(Nwg, circule_outer_radius, Npml, circule_inter_radius, epsr, index_font, index_background)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ceviche.viz.abs(epsr, cbar=True)</span></span><br><span class="line"></span><br><span class="line">    source1 = insert_mode(omega1, dl, input_slice.x, input_slice.y, epsr, m=<span class="number">1</span>)</span><br><span class="line">    source2 = insert_mode(omega2, dl, input_slice.x, input_slice.y, epsr, m=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    probe1 = insert_mode(omega1, dl, output_slice1.x, output_slice1.y, epsr, m=<span class="number">1</span>)</span><br><span class="line">    probe2 = insert_mode(omega2, dl, output_slice2.x, output_slice2.y, epsr, m=<span class="number">1</span>)</span><br><span class="line">    epsr = set_opt_structure(poles, <span class="number">0</span>, epsr, index_background)</span><br><span class="line">    simulation1, simulation2, ax, fig = viz_sim(epsr, source1, source2, slices = [input_slice, output_slice1, output_slice2])</span><br><span class="line"></span><br><span class="line">    _, _, Ez1 = simulation1.solve(source1)</span><br><span class="line">    _, _, Ez2 = simulation2.solve(source2)</span><br><span class="line"></span><br><span class="line">    E01 = mode_overlap(Ez1, probe1)</span><br><span class="line">    E02 = mode_overlap(Ez2, probe2)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(E01,E02)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>以上是在 ceviche 创建的一个 1x2 端口器件，并在器件内部实现了类光子晶体结构。</p><p>实现结构为便于后续修改，所有结构的属性都参数化，后续仅需要通过需要参数就可以直达理想的结构。</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋追光 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ceviche </tag>
            
            <tag> 频域有限差分方法 </tag>
            
            <tag> 参数化仿真模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格雷码编解码</title>
      <link href="/2024/09/27/6-Gray-Code-Decoding/"/>
      <url>/2024/09/27/6-Gray-Code-Decoding/</url>
      
        <content type="html"><![CDATA[<blockquote><p>格雷码（Gray Code）是一种特殊的二进制编码方式，其中相邻的两个格雷码之间只有一个二进制位不同。这种编码方式不仅保证了相邻数字之间的差异最小，从而降低了错误率，这种编码方式的特点使得它在数据传输和旋转编码器等领域具有显著的优势。</p></blockquote><p>最近，在重构遗传算法的过程中，想到使用格雷码表征基因序列。二进制编码与格雷码在操作系统层面，可能格雷码优势已经不太显现，操作系统层面已经做了码制转换或者编码纠错太多手段降低误码率，即使是格雷码也需要进行特定编码再由操作系统输出给硬件。</p><h2 id="编码">1 编码</h2><p>编码过程分为两步。</p><p>第一步，实数转换成二进制编码，这个过程用比较而不是算术操作，降低了系统对计算的需求，简单比较电路即可实现，不同比较器属于模拟电路范畴，专用程度太高。</p><p>第二步，二进制编码进一步编码成格雷码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">real2gray</span>(<span class="params">lb, ub, precision, x</span>):</span><br><span class="line">    len_single_Chrom = <span class="built_in">int</span>(np.ceil(np.log2((ub-lb)/precision+<span class="number">1</span>)))</span><br><span class="line">    y = np.<span class="built_in">round</span>((x-lb)/precision)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;y&quot;</span>, y)</span><br><span class="line">    <span class="built_in">bin</span>=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_single_Chrom):</span><br><span class="line">        <span class="comment"># print(i, y, bin)</span></span><br><span class="line">        <span class="keyword">if</span>(y &gt;= (<span class="number">2</span>**(len_single_Chrom-i-<span class="number">1</span>))):</span><br><span class="line">            binary_list = np.logspace(start=(len_single_Chrom-<span class="number">1</span>-i),stop=<span class="number">0</span>,base=<span class="number">2</span>,num=(len_single_Chrom-i))</span><br><span class="line">            binary_array = np.cumsum(binary_list)</span><br><span class="line">            <span class="keyword">if</span> binary_array[<span class="number">0</span>] &gt; y:</span><br><span class="line">                <span class="built_in">bin</span>.append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">bin</span>.append(<span class="number">1</span>)</span><br><span class="line">            y = y - (<span class="number">2</span>**(len_single_Chrom-i-<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">bin</span>.append(<span class="number">0</span>)</span><br><span class="line">    compare_bit = <span class="number">0</span></span><br><span class="line">    gray_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((<span class="built_in">len</span>(<span class="built_in">bin</span>))):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">bin</span>[i] == compare_bit:</span><br><span class="line">            gray_list.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gray_list.append(<span class="number">1</span>)</span><br><span class="line">        compare_bit = <span class="built_in">bin</span>[i]</span><br><span class="line">    <span class="keyword">return</span> np.array(gray_list).reshape((<span class="number">1</span>, len_single_Chrom))</span><br></pre></td></tr></table></figure><h2 id="解码">2 解码</h2><p>解码系统是将格雷码转换成实数，该过程最终需要将输出离散值与实数值做一个空间对应转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gray2real</span>(<span class="params">GRAY</span>):</span><br><span class="line">    _, len_gray= GRAY.shape</span><br><span class="line">    BINV = GRAY.cumsum(axis=<span class="number">1</span>)%<span class="number">2</span></span><br><span class="line">    <span class="comment"># GRAY_CODE = BINV.cumsum(axis=1)%2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1 BINV&quot;</span>,BINV)</span><br><span class="line">    <span class="comment"># print(GRAY, BINV, GRAY_CODE)</span></span><br><span class="line">    binary_list = np.logspace(start=<span class="number">0</span>, stop=(len_gray-<span class="number">1</span>), base=<span class="number">0.5</span>, num=len_gray)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2 binary_list&quot;</span>,binary_list)</span><br><span class="line">    real_list = (BINV*binary_list).<span class="built_in">sum</span>(axis = <span class="number">1</span>)/binary_list.<span class="built_in">sum</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;3 real_list&quot;</span>, real_list)</span><br><span class="line">    <span class="keyword">return</span> real_list</span><br></pre></td></tr></table></figure><p>在实现编码解码的过程中，发现一个有趣的事情，格雷码编码系统，通过有限次编码可以实现解码。</p><h2 id="通过有限次编码可以实现解码">3 通过有限次编码可以实现解码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="built_in">len</span> = <span class="number">200</span></span><br><span class="line">max_item = <span class="number">20000</span></span><br><span class="line">gv = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, size = (<span class="built_in">len</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1_gv&quot;</span>, gv)</span><br><span class="line"></span><br><span class="line">bin_list = np.logspace(start=<span class="built_in">len</span>-<span class="number">1</span>, stop=<span class="number">0</span>, base=<span class="number">2</span>, num=<span class="built_in">len</span>)</span><br><span class="line"><span class="comment"># print(bin_list)</span></span><br><span class="line">bv = gv</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_item):</span><br><span class="line">    bv = bv.cumsum()%<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> (bv == gv).<span class="built_in">all</span>() :</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输出迭代&quot;</span>,i, gv ,bv)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2_bv&quot;</span>, bv)</span><br></pre></td></tr></table></figure><p>从学数字电路开始，数字 IC 设计中或者自行设计电路、写程序的过程中，就一直非常青睐格雷码。</p><p>但这次重构遗传算法，旨在从基因角度入手调优该算法，发现了格雷码具有有限次编码实现解码的特点，还是觉得非常有意思。</p><p>仿佛在说，世界是普遍联系的，兜兜转转又回到起点。</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋不忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码解码 </tag>
            
            <tag> 格雷码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>往事与我：一粒金米</title>
      <link href="/2024/09/15/5_cnooc_king/"/>
      <url>/2024/09/15/5_cnooc_king/</url>
      
        <content type="html"><![CDATA[<blockquote><p>金米不是黄金制成的米，它最初就只是一粒家常未煮的大米，后来经过丽伟哥采用特殊的笔刻写上“健康、快乐”封装在一个透明的装有水的球体中，再穿上红绳就成了一个代表美好祝福的吊坠。<br> 谢谢丢失的金米，让我在2020伊始，想起一段恍如梦境般难忘的经历。</p></blockquote><p>金米不是黄金制成的米，它最初就只是一粒家常未煮的大米，后来经过丽伟哥采用特殊的笔刻写上“健康、快乐”封装在一个透明的装有水的球体中，再穿上红绳就成了一个代表美好祝福的吊坠。</p><p>我之所以称这粒米为金米，因为它的制作者丽伟哥姓金，丽伟哥是我去M平台顶岗之后才认识的，虽然之前在都同在CPC，但可能倒班原因，一直未认识。M平台设计是无人平台，M是代号但具体什么含义不知道，蓬莱油田的平台代号大抵是ABCDEF，其中B平台和RUP平台构成CPC，就是所谓的中心平台，一般自营平台也称之为CEP平台，后来我离开之前，又添了J平台、V平台、G平台，我猜可能与区域有一定关联。M平台可以说是渤海地区自动化程度最高的平台之一，M平台大部分工作不需要在M平台就可以完成，刚去无人平台开始时丽伟哥和我配合最多，当然因此他也算深受我害了，因为大部分老人都不愿意和一个没有经验的新人合作，甚至可以说不是合作，而是指导，当然，尽管有时也能感受到他的无奈和着急，但他也从未因此抱怨或者利用小技巧调班避开我这个烂摊子。</p><p>丽伟哥当时制作金米一共制作了两粒，一粒送给了建超哥，我也沾着建超哥的光有幸得到了一颗。丽伟哥那天给我们讲当时他在学校时靠这门手艺在学校门口摆地摊赚过钱，我还开玩笑的说要拜他为师学习手艺来着，当然后来在每天的穿梭和工作中忘了。当时他问超哥和我选刻什么字时，我一直以为自己很不贪心，选了“健康、快乐”四个平平常常的字，其实不然，这才是最贪心的。首先，健康是人生最大的福气，人的一生要一直健康可以说是不可能的，人这一辈子或多或少的都要与病魔打交道，可以说健康才是人最顶级的奢侈品。其次，简单的快乐又谈何容易，饥饿的时候希望有一口饭吃足矣，吃饱喝足之后又有了新的烦恼，人这一辈子单单做到知足就很难。然而我意识到这些所谓的平常是何等的奢侈已是在那很久很久以后。</p><p>我一直以为我的金米被存放在红色储物箱里，然而前段时间翻旧物却没找见，很是难受。我一直被我的朋友诟病从不主动联系别人，其实不是不想联系，是害怕联系，首先害怕自己的热情被冷水浇灭，更重要的是，我是一个精神层面洁癖者。前段时间，我和高中好友联系，我就只说了一句“溺水三千只取一瓢饮”，他便拿出老梗一句一个“一瓢”，他的幽默在我看来就显得特别轻浮，从这以后我便也很少和他联系。我想，如果常联系会使原有的认知发生改变，就把所有的感恩、感谢放在心里，何必让这些美好变质。当然我一直以来的态度，严于待人，宽于律己，可能也是时候应该彻底改改了。</p><p>读了更多的书，遇见更多的人，我更加地不再主动的去经营所谓的友谊，真挚的友谊从不是经营来的，而是真诚相待换得的，有幸能一起相处时就拿出十分真心去珍惜，有朝一日分别时，不是伤感，而是用心去祝福。我的金米虽然丢失，甚至我也从未向丽伟哥说过哪怕一声谢谢，但我从未忘记昔日在M平台一起合作的日子、一起吃过的饭、一起面对的困难。</p><p>谢谢丢失的金米，让我在2020伊始，想起一段恍如梦境般难忘的经历。</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋过往 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNOOC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>少年的你</title>
      <link href="/2024/09/15/2_Shaonian/"/>
      <url>/2024/09/15/2_Shaonian/</url>
      
        <content type="html"><![CDATA[<p>我已经很久不看青春剧和哲理剧了，现在看电影一般喜欢看喜剧。很多时候电影里的社会现象离自己太远，看了之后会有一种无病呻吟的感觉，因为生活圈狭窄的我没有接触这些现象，看了之后也没有太多感情，看多了之后，便会反感。《少年的你》中主角的生活，其实也离我很远，但在某个镜头还是被感动，上次有这样的感动还是看《岁月神偷》，那时生活缺少感动，正好可以为赋新词强说愁。</p><p>从题材上来说，选择校园暴力为主题就已经胜了《我不是药神》，每个人几乎都上过学即使没有参与或者遭遇校园暴力，但不是每个人都生过病，在看《我不是药神》时，我一度觉得电影太过煽情，用力过猛地在表达某种现象，因此在看到最后时不是感动，而是觉得电影在过度消费我们的感动，或许我刚走出校园那时会为这些刻意修饰的画面感动，但现在不会。《少年的你》刚开始时陈念重复领读“It was playground”"It used to be playground"一直到胡小蝶跳楼自杀我都打不起任何精神，一度以为是《致青春》之流的打着青春感动旗号圈钱的烂片。但是等看完之后，不仅很是感动，居然还会下载回放，生怕漏掉很多细节，虽然刚开始说不出泪点，回忆和情节唯一相似便是都上过学。在回放时，我带着心中感动、以及对感动来源的探索细细品味电影情节。想起前段时间和大学舍友小聚，大家不可避免地谈起自己的过去，有些人的成长之路平淡到无从想起，有些人的求学过程坎坷让听得人难以置信，有些人自我做作地为青春添一笔试图以此换取传奇以求铭记。</p><p>我们生活的环境不同，导致了每个人都有不同的性格，这正是因为各异的性格，让我们走向了不同的通往成年之路，或许正是看到听到更多的人生百态之后看到电影以后也明白了不是每个人都可以顺利地长大，也明白了很多人性格抑郁的来源。我成长生活中最阴暗的时候是小学四年级，那年我被贴上暴力的称号，那年我被罚抄的作业到现在还欠着，那年我身边的小伙伴现在几乎都是我们镇上名霸一方的混混，我至今记得升五年级时我飞也似的逃离。那年，班主任生宝宝，换了一个老师来带课，老师姓田，刚开始还感觉到特别轻松，因为新老师很难一时适应我们，而这样的新环境对孩子们来说却是一个美好的缓冲期。我已经忘了美好缓冲过后对大部分孩子来说究竟是美丽憧憬还是噩梦降临，但对我来说，之后在很长一段时间，我对学校产生了一种无名的憎恨。噩梦降临前夕，是一小段不太友好的梦，我首次在小学时遇到一个喜欢画三八线的同桌，超过界限便会狠狠打我，一下课便穿梭在走廊上玩耍的我没太多时间顾及这些，保持着“你画你的线，我不搭理你”的态度，本以为一切照旧也就这样了，事情的发展总是千奇古怪，这个女孩总是忘记带书，我便友善地和她分享，谁知她害怕老师惩罚用把我的书拉到她那边，这也就算了，合用书的过程中难免会遇到胳膊过线，便会狠狠地挨打，终于在一节美术课我忍无可忍地爆发了，这节美术课她依旧忘了带书，她全部拿走也罢，可她偏偏在我用水彩笔勾勒我美术作品时推了我一下胳膊，我的作品一下成了残缺品，我愤怒地越过界限抢回自己的书然后撕了，可是万万没想到她居然哭了。然后美术老师告诉了班主任，班主任不分青红皂白地说我行为暴力，然后把另一个有心脏病的女孩调到我旁边，那时真有被吓到，心脏病女孩在我旁边坐了大半年，我都不敢和她说话，不过也能感到她的善意，我看不清黑板时，她用小声读给我听，那时我不知道什么是心脏病，害怕她发病找我，几乎从不回应，一如既往，一下课就出去，上课踏铃归来。当时很难理解女孩到底有多会假哭才会做到如此厚颜无耻，也很难理解一个临时代课班主任如此荒缪地用暴力描述我。噩梦才刚刚开始，然后某次非常规写字课，我坐在那时要好的小伙伴旁边，那时只要非正式课我都会这样，老师评价某个小伙伴的字很难看，问那孩子这字像什么，当时我旁边的孩子就回答像耗子，其实这是搞笑，因为台上的小伙伴坏名就是耗子，然后另一小伙伴说老鼠，还有一个调皮的孩子来了句青蛙，我就用方言补了一句蟾蜍，我们这几个很是开心地笑着，本以为非正课也没事，因为平时写字课就是这样，哪知班主任那天可能心情不好突然发了飙，让我们四个人抄书后生词表五遍，当然我们几个继续当作开玩笑没当回事，班主任第二天检查后继续大怒，让我们以后不要上写字课就罚抄生词表，并且每天写不掉就乘以二，那一年我签老师的生词表达好几百遍，我忐忑的害怕待在教室里，害怕上班主任的课，甚至讨厌学习。如果我这拍校园暴力顶多只能拍个喜剧，而我这个施暴者却是那个受害者。那一年，也许因为特别，每个陪我玩的小伙伴我都记得，画三八线的女孩，心脏病女孩，都记得，有些初中时还是同学，但遇见时都毫无例外地选择假装遗忘，我也是。看完《少年的你》我想如果我那时遇到的不是爱恶人先哭的画三八线女孩，而是一个更加恶劣但善于伪装的孩子，如此不分青红皂白的老师也许也会将我逼上一条反抗到真正施暴的不归路。</p><p>“只有你赢了，我才不算输”，“我保护你，你保护全世界”，虽然看过太多有关校园青春爱情的小说，但这些陈词滥调还是会让我有些许感动，可能是小说情节再现，可能是自己校园生活的一贫如洗。</p><p>初看时，我认为《少年的你》中最有争议的是小北替陈念顶罪，当时我在想，刚认识没有几个月的朋友不可能会这样做，而且是杀人罪，我一度认为这是编剧为了整出点花子来故意所为。当我用小屏回放时，我想起高中自己很多一冲动就去干了的事情，当时不后悔，现在也不后悔，虽然不像电影情节如此精彩，但起因都是因为生活里的一丁点感动。小北真正感动于陈念是因为她问了他疼吗，他说那是第一次有人这样问。电影后期通过两个警察也给出了答案，“你相信一个人会替另一个顶杀人罪和强奸罪吗？”“我们不会，可他们是少年。”年少的我们不经事，缺少成年的人理性，只要有一丝感动就会付出所有，电影里的小北不正是我们的少年时？</p><p>最后，“We are all in the gutter ,but some of us are looking at the stars.”“我们生活在阴沟里，但依然有人仰望星空”，献给所有的少年以及曾经少年的你！</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>萤火之森</title>
      <link href="/2024/09/15/3_Firefly_Forest/"/>
      <url>/2024/09/15/3_Firefly_Forest/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有幸，如果你有看到这篇分享，哪怕是不经意的误入；<br> 有幸，如果你也看过《萤火之森》，哪怕已经忘记故事情节;<br> 有幸，如果你发现这是跨越成长的对话;</p></blockquote><p>年幼，相遇，在老家屋后的神秘森林；</p><p>迷路，啼哭，人类的小孩那么可怜。</p><p>带着面具，有趣，说他是妖怪；</p><p>可怜，却又可恶，非要触碰我的身体。</p><p>好奇，回家问过关于森林所有的故事，没人了解，带着面具的妖怪；</p><p>假装睡着，但眼睛一直睁着，看着你。</p><p>忍不住，摘下你的面具，你的脸庞与人类无异；</p><p>第一次感受人类的温度，那么亲近，即使隔着面具。</p><p>你的脸庞在我心底第一次留下烙印，从未想过，在之后的岁月里，都再也难以忘记；</p><p>第一次动了心，却假装镇定，人类的温度是那么有吸引力。</p><p>突然喜欢上夏天，因为夏天有你；</p><p>即使不冷，也爱在冬季戴上围巾，你送的围巾，有人类的温暖。</p><p>你摘下面具，还是初见的模样，而这些年里，我已不再是第一次相遇在森林时的幼稚孩童；</p><p>这些年见证你的成长，那个初见啼哭的幼童，已长成我喜欢的模样，内心再也不能平静。</p><p>那日路滑，扶着同学的手走过，想到你；</p><p>和你并肩走在森林，听你讲未来的规划，有我足矣。</p><p>毕业后，希望回到老家工作，这样就可以常常见到你，哪怕只是并肩，只希望可以一直走下去；</p><p>有相遇就会由分离，即使再怎么不愿意。</p><p>有人类参与的仪式，会很但心；</p><p>看着你笑得很开心，我想我已做好所有决定，但抱歉没告诉你。</p><p>扶起小孩，看你逐渐消失，抱得更紧；</p><p>第一次也是最后一次抱你，没有难过，用力去笑，把最美的瞬间留给你。</p><p>明明知道，那是人类小孩，却还去触碰；</p><p>不忍心去触碰你，怕你余生会怪自己。</p><p>如果不去扶那个小孩，那就不是你；</p><p>谢谢你，哪怕只是一次拥抱，也很开心。</p><p>感恩生命，让我们在最美的时光相遇，爱而不得也是一种美丽；</p><p>遇见你，已是有幸，记得森林里依旧有我们曾经一起走过留下的气息。</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动漫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐秘在角落里的坏小孩</title>
      <link href="/2024/09/15/4_book_bad_boy/"/>
      <url>/2024/09/15/4_book_bad_boy/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于先看《坏小孩》再看《隐秘的角落》导致剧情在脑海交织，时空错乱。<br> 如今虽然已很久很久，然而在某个街头，遇见和曾经很像的回眸，痛苦往事依然会涌上心头，然而那些路却无法重走。</p></blockquote><p>当朱朝阳将妹妹失手推下楼的时候，这个游戏就只剩下朱朝阳和张东升的博弈，而本以为打破朱朝阳宁静生活的普普和丁浩注定只有死这一种结局。</p><p>朱朝阳和张东升在很多地方都很像，都喜欢数学。都是生活的受害者，都遭受着家庭的冷暴力，一个来自父亲，一个来自妻子。都有着看似隐忍实则狠毒的内心，一个在面对父亲不爱同学欺凌时，处处小心，却十分歹毒的借他人之手杀死父亲，并在结尾借用日记和哭诉解决同学欺凌。一个在面对即将离婚净身出户时，心生歹念，伪装讨好岳父岳母，将其杀害。最重要的是，这两人都表明，只有死人才会保守秘密，这也就注定最后他们只会有一个人活下去。</p><p>第一次看完之后，我比较纠结朱朝阳的黑化时间节点，书开头时那个讨人可怜的小孩短时间内恶魔化的过程我实在难以想象。如果知道结局，时间倒回到丁浩和普普第一次敲门的时候，我想转身扭头就走的应该是丁浩和普普。很多结局看似可以改变，其实从发生的开始已经注定，唯一的意外是小说将原本两个不想干的人朱朝阳和张东升写到了一起。当朱朝阳同意捉弄妹妹时，妹妹的死已然无力改变，因为朱朝阳接受不了原本已经不爱自己的父亲再知道自己一丁点的不好，尤其是还关于那个住在父亲心里的妹妹。朱晶晶的死如果无法改变，那么普普和丁浩的死也无法改变，我本以为朱朝阳利用感情劝说普普杀人是为了让他们都站到同一条船上，给他们就一条生路。可是我的本以为只是我以为的，而朱朝阳始终坚信他的原则：死人才会保守秘密。写日记的时候，他的未来就不再有普普，也不再有丁浩，所有和普普说的那些看似情话的承诺不过都是利用，“四人麻将”，“明年一定”，都是谎话。</p><p>其实，比起张东升，我更觉得严良和朱朝阳是一类人，朱朝阳的日记勾起严良的共鸣，严良问朝阳的那道印错了的无解题只有他俩知道，彼时的张东升根本无心放在这方面，张东升知道无解也是由严良口述得知。严良偷偷撕下笔记检测没有直接要求公安部门检测，也说明了严良一定会放过朱朝阳，从内心某个深处，他早已经做出了选择——放过这个少年。</p><p>关于严良，书中只交代他是浙大数学系博导、张东升的老师、张东升妻子徐静家的亲戚，曾经是省公安厅的刑侦专家，至于他的经历书中也只有结尾处他在看朱朝阳笔记时一笔带过的独白回忆，我们无从得知，或许他也曾和朱朝阳一样经历黑暗，一些已经不能开口的人带走所有的秘密，在某个深夜，被噩梦吓醒，很多路已不能回头。当他看见这本日记，就像看到曾经的自己，如今虽然已很久很久，然而在某个街头，遇见和曾经很像的回眸，痛苦往事依然会涌上心头，然而那些路却无法重走。</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
            <tag> 网剧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 安装简明教程</title>
      <link href="/2024/09/02/1_hexo_install/"/>
      <url>/2024/09/02/1_hexo_install/</url>
      
        <content type="html"><![CDATA[<blockquote><p>hexo 快速、简洁且高效的博客框架</p></blockquote><h4 id="安装与部署">1 安装与部署</h4><p>首先，建议更换源，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><p>安装 hexo，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>初始化 hexo，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>编译 hexo，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>启动 hexo，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>建议每次编译前清理，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>安装部署，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>配置 github 仓库，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: &lt;repository url&gt; <span class="comment"># https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><p>部署，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h4 id="域名解析">2 域名解析</h4><p>1 github -&gt; repoditory -&gt; setting -&gt; pages -&gt; Custom domain</p><p>这样每次部署后都需要手动配置，或者</p><p>hexo -&gt; source -&gt; CNAME</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example.com</span><br></pre></td></tr></table></figure><p>这种方法部署自动配置域名。</p><p>2 域名服务商后台解析域名即可。</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br> 📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋不忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 教程 </tag>
            
            <tag> 前端技术 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
