<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于开源 fdfd 求解器 ceviche 参数化仿真模型创建</title>
      <link href="/2024/09/27/7-ceviche-1x2-structure/"/>
      <url>/2024/09/27/7-ceviche-1x2-structure/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ceviche 是一个开源的二维 fdfd 求解器，最近开发自动化设计工具，想要找一个物理场求解器测试自动化设计工具收敛性能，因此简单学习了下该开源求解器。</p></blockquote><p>自动化设计工具旨在为使用各类仿真工具的用户提供从扫参到优化的飞跃，和扫参相差不大的设计流程，提供更强大的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;figure.dpi&#x27;</span>]=<span class="number">100</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> ceviche</span><br><span class="line"><span class="keyword">from</span> skimage.draw <span class="keyword">import</span> disk</span><br><span class="line"><span class="keyword">from</span> ceviche.modes <span class="keyword">import</span> insert_mode</span><br><span class="line"><span class="keyword">from</span> ceviche <span class="keyword">import</span> fdfd_ez, jacobian</span><br><span class="line"><span class="keyword">import</span> autograd.numpy <span class="keyword">as</span> npa</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line">Slice = collections.namedtuple(<span class="string">&#x27;Slice&#x27;</span>, <span class="string">&#x27;x y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">viz_sim</span>(<span class="params">epsr, source1, source2, slices=[]</span>):</span><br><span class="line">    simulation1 = fdfd_ez(omega1, dl, epsr, [Npml, Npml])</span><br><span class="line">    _, _, Ez1 = simulation1.solve(source1)</span><br><span class="line">    simulation2 = fdfd_ez(omega2, dl, epsr, [Npml, Npml])</span><br><span class="line">    _, _, Ez2 = simulation2.solve(source2)</span><br><span class="line"></span><br><span class="line">    fig, ax = plt.subplots(<span class="number">1</span>, <span class="number">3</span>, constrained_layout=<span class="literal">True</span>, figsize=(<span class="number">9</span>,<span class="number">3</span>))</span><br><span class="line">    ceviche.viz.<span class="built_in">abs</span>(Ez1, outline=epsr, ax=ax[<span class="number">0</span>], cbar=<span class="literal">False</span>)</span><br><span class="line">    ceviche.viz.<span class="built_in">abs</span>(Ez2, outline=epsr, ax=ax[<span class="number">1</span>], cbar=<span class="literal">False</span>)</span><br><span class="line">    ceviche.viz.<span class="built_in">abs</span>(epsr, ax=ax[<span class="number">2</span>], cmap=<span class="string">&#x27;Greys&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> sl <span class="keyword">in</span> slices:</span><br><span class="line">        ax[<span class="number">0</span>].plot(sl.x*np.ones(<span class="built_in">len</span>(sl.y)), sl.y, <span class="string">&#x27;w-&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">        ax[<span class="number">1</span>].plot(sl.x*np.ones(<span class="built_in">len</span>(sl.y)), sl.y, <span class="string">&#x27;w-&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">    </span><br><span class="line">    ax[<span class="number">0</span>].set_title(<span class="string">r&#x27;$\lambda_1$ = %.2f $\mu$m&#x27;</span> % (<span class="number">299792458</span>/(omega1/<span class="number">2</span>/np.pi)/<span class="number">1e-6</span>))</span><br><span class="line">    ax[<span class="number">1</span>].set_title(<span class="string">r&#x27;$\lambda_2$ = %.2f $\mu$m&#x27;</span> % (<span class="number">299792458</span>/(omega2/<span class="number">2</span>/np.pi)/<span class="number">1e-6</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (simulation1, simulation2, ax, fig)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_structure</span>(<span class="params">Nx, Ny, Nwg, Nwd, Nox, Noy, Npml, edge_N, index_font, index_background</span>):</span><br><span class="line">    epsr = np.ones((Nx, Ny)) * (index_font ** <span class="number">2</span>)</span><br><span class="line">    epsr[<span class="number">0</span>:Nwg, (Ny-Nwd)//<span class="number">2</span>:(Ny+Nwd)//<span class="number">2</span>] = index_background ** <span class="number">2</span></span><br><span class="line">    epsr[Nwg:Nwg+Nox, (edge_N) * Npml:(edge_N) * Npml+Noy] = index_background ** <span class="number">2</span></span><br><span class="line">    epsr[Nwg+Nox:<span class="number">2</span>*Nwg+Nox,(edge_N) * Npml: (edge_N) * Npml+Nwd] = index_background ** <span class="number">2</span></span><br><span class="line">    epsr[Nwg+Nox:<span class="number">2</span>*Nwg+Nox,(edge_N) * Npml+Noy-Nwd:(edge_N) * Npml+Noy] = index_background ** <span class="number">2</span></span><br><span class="line">    input_slice = Slice(x=np.array(Npml+Nwg//<span class="number">2</span>), </span><br><span class="line">        y=np.arange((Ny-Nwd)//<span class="number">2</span>- Nwd, (Ny+Nwd)//<span class="number">2</span>+Nwd))</span><br><span class="line">    output_slice1 = Slice(x=np.array(Nwg+Nox+Nwg//<span class="number">2</span>), </span><br><span class="line">        y=np.arange(edge_N*Npml+Noy-<span class="number">2</span>*Nwd, edge_N*Npml+Noy+Nwd))</span><br><span class="line">    output_slice2 = Slice(x=np.array(Nwg+Nox+Nwg//<span class="number">2</span>), </span><br><span class="line">        y=np.arange( edge_N*Npml-Nwd, edge_N*Npml+<span class="number">2</span>*Nwd))</span><br><span class="line">    <span class="keyword">return</span> epsr, input_slice, output_slice1, output_slice2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_opt_structure</span>(<span class="params">Nwg, circule_outer_radius, Npml, circule_inter_radius, epsr, index_font, index_background</span>):</span><br><span class="line">    m = Nox // (circule_outer_radius * <span class="number">2</span>)</span><br><span class="line">    n = Noy // (circule_outer_radius * <span class="number">2</span>)</span><br><span class="line">    poles = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            rr, cc = disk((Nwg+<span class="number">2</span>*circule_outer_radius*(j+<span class="number">0.5</span>), (edge_N)*Npml+<span class="number">2</span>*circule_outer_radius*(i+<span class="number">0.5</span>)), circule_inter_radius)</span><br><span class="line">            poles.append([rr,cc])</span><br><span class="line">            epsr[rr,cc] = (index_font ** <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> epsr, poles</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_opt_structure</span>(<span class="params">poles, pole_index, epsr, index</span>):</span><br><span class="line">    epsr[poles[pole_index][<span class="number">0</span>],poles[pole_index][<span class="number">1</span>]] = index ** <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> epsr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># print(&quot;test&quot;)</span></span><br><span class="line">    <span class="comment"># user_define</span></span><br><span class="line">    omega1=<span class="number">2</span>*np.pi*<span class="number">200e12</span></span><br><span class="line">    omega2=<span class="number">2</span>*np.pi*<span class="number">230e12</span></span><br><span class="line">    dl = <span class="number">20e-9</span></span><br><span class="line">    opt_size_x = <span class="number">2400e-9</span></span><br><span class="line">    opt_size_y = <span class="number">2400e-9</span></span><br><span class="line">    wg_len = <span class="number">2000e-9</span></span><br><span class="line">    wg_width = <span class="number">500e-9</span></span><br><span class="line">    Npml   = <span class="number">20</span></span><br><span class="line">    edge_N   = <span class="number">4</span></span><br><span class="line">    index_background = <span class="number">3.47</span></span><br><span class="line">    index_font       = <span class="number">1.22</span></span><br><span class="line">    circule_outer_radius = <span class="number">6</span></span><br><span class="line">    circule_inter_radius = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    Nx = <span class="built_in">int</span>((opt_size_x + <span class="number">2</span> * wg_len)*<span class="number">10e9</span> / (dl*<span class="number">10e9</span>))</span><br><span class="line">    Ny = <span class="built_in">int</span>((opt_size_y)*<span class="number">10e9</span> / (dl*<span class="number">10e9</span>) + <span class="number">2</span> * edge_N * Npml)</span><br><span class="line">    Nox = <span class="built_in">int</span>((opt_size_x*<span class="number">10e9</span>) / (dl*<span class="number">10e9</span>))</span><br><span class="line">    Noy = <span class="built_in">int</span>((opt_size_y*<span class="number">10e9</span>) / (dl*<span class="number">10e9</span>))</span><br><span class="line">    Nwg = <span class="built_in">int</span>(wg_len*<span class="number">10e9</span> / (dl*<span class="number">10e9</span>))</span><br><span class="line">    Nwd = <span class="built_in">int</span>(wg_width*<span class="number">10e9</span> / (dl*<span class="number">10e9</span>))</span><br><span class="line"></span><br><span class="line">    epsr, input_slice, output_slice1, output_slice2 = init_structure(Nx, Ny, Nwg, Nwd, Nox, Noy, Npml, edge_N, index_font, index_background)</span><br><span class="line">    epsr, poles = init_opt_structure(Nwg, circule_outer_radius, Npml, circule_inter_radius, epsr, index_font, index_background)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ceviche.viz.abs(epsr, cbar=True)</span></span><br><span class="line"></span><br><span class="line">    source1 = insert_mode(omega1, dl, input_slice.x, input_slice.y, epsr, m=<span class="number">1</span>)</span><br><span class="line">    source2 = insert_mode(omega2, dl, input_slice.x, input_slice.y, epsr, m=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    probe1 = insert_mode(omega1, dl, output_slice1.x, output_slice1.y, epsr, m=<span class="number">1</span>)</span><br><span class="line">    probe2 = insert_mode(omega2, dl, output_slice2.x, output_slice2.y, epsr, m=<span class="number">1</span>)</span><br><span class="line">    epsr = set_opt_structure(poles, <span class="number">0</span>, epsr, index_background)</span><br><span class="line">    simulation1, simulation2, ax, fig = viz_sim(epsr, source1, source2, slices = [input_slice, output_slice1, output_slice2])</span><br><span class="line"></span><br><span class="line">    _, _, Ez1 = simulation1.solve(source1)</span><br><span class="line">    _, _, Ez2 = simulation2.solve(source2)</span><br><span class="line"></span><br><span class="line">    E01 = mode_overlap(Ez1, probe1)</span><br><span class="line">    E02 = mode_overlap(Ez2, probe2)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(E01,E02)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>以上是在 ceviche 创建的一个 1x2 端口器件，并在器件内部实现了类光子晶体结构。</p><p>实现结构为便于后续修改，所有结构的属性都参数化，后续仅需要通过需要参数就可以直达理想的结构。</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。 <br>📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋追光 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 频域有限差分方法 </tag>
            
            <tag> 参数化仿真模型 </tag>
            
            <tag> ceviche </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格雷码编解码</title>
      <link href="/2024/09/27/6-Gray-Code-Decoding/"/>
      <url>/2024/09/27/6-Gray-Code-Decoding/</url>
      
        <content type="html"><![CDATA[<blockquote><p>格雷码（Gray Code）是一种特殊的二进制编码方式，其中相邻的两个格雷码之间只有一个二进制位不同。这种编码方式不仅保证了相邻数字之间的差异最小，从而降低了错误率，这种编码方式的特点使得它在数据传输和旋转编码器等领域具有显著的优势。</p></blockquote><p>最近，在重构遗传算法的过程中，想到使用格雷码表征基因序列。二进制编码与格雷码在操作系统层面，可能格雷码优势已经不太显现，操作系统层面已经做了码制转换或者编码纠错太多手段降低误码率，即使是格雷码也需要进行特定编码再由操作系统输出给硬件。</p><h2 id="编码">1 编码</h2><p>编码过程分为两步。</p><p>第一步，实数转换成二进制编码，这个过程用比较而不是算术操作，降低了系统对计算的需求，简单比较电路即可实现，不同比较器属于模拟电路范畴，专用程度太高。</p><p>第二步，二进制编码进一步编码成格雷码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">real2gray</span>(<span class="params">lb, ub, precision, x</span>):</span><br><span class="line">    len_single_Chrom = <span class="built_in">int</span>(np.ceil(np.log2((ub-lb)/precision+<span class="number">1</span>)))</span><br><span class="line">    y = np.<span class="built_in">round</span>((x-lb)/precision)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;y&quot;</span>, y)</span><br><span class="line">    <span class="built_in">bin</span>=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_single_Chrom):</span><br><span class="line">        <span class="comment"># print(i, y, bin)</span></span><br><span class="line">        <span class="keyword">if</span>(y &gt;= (<span class="number">2</span>**(len_single_Chrom-i-<span class="number">1</span>))):</span><br><span class="line">            binary_list = np.logspace(start=(len_single_Chrom-<span class="number">1</span>-i),stop=<span class="number">0</span>,base=<span class="number">2</span>,num=(len_single_Chrom-i))</span><br><span class="line">            binary_array = np.cumsum(binary_list)</span><br><span class="line">            <span class="keyword">if</span> binary_array[<span class="number">0</span>] &gt; y:</span><br><span class="line">                <span class="built_in">bin</span>.append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">bin</span>.append(<span class="number">1</span>)</span><br><span class="line">            y = y - (<span class="number">2</span>**(len_single_Chrom-i-<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">bin</span>.append(<span class="number">0</span>)</span><br><span class="line">    compare_bit = <span class="number">0</span></span><br><span class="line">    gray_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((<span class="built_in">len</span>(<span class="built_in">bin</span>))):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">bin</span>[i] == compare_bit:</span><br><span class="line">            gray_list.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gray_list.append(<span class="number">1</span>)</span><br><span class="line">        compare_bit = <span class="built_in">bin</span>[i]</span><br><span class="line">    <span class="keyword">return</span> np.array(gray_list).reshape((<span class="number">1</span>, len_single_Chrom))</span><br></pre></td></tr></table></figure><h2 id="解码">2 解码</h2><p>解码系统是将格雷码转换成实数，该过程最终需要将输出离散值与实数值做一个空间对应转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gray2real</span>(<span class="params">GRAY</span>):</span><br><span class="line">    _, len_gray= GRAY.shape</span><br><span class="line">    BINV = GRAY.cumsum(axis=<span class="number">1</span>)%<span class="number">2</span></span><br><span class="line">    <span class="comment"># GRAY_CODE = BINV.cumsum(axis=1)%2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1 BINV&quot;</span>,BINV)</span><br><span class="line">    <span class="comment"># print(GRAY, BINV, GRAY_CODE)</span></span><br><span class="line">    binary_list = np.logspace(start=<span class="number">0</span>, stop=(len_gray-<span class="number">1</span>), base=<span class="number">0.5</span>, num=len_gray)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2 binary_list&quot;</span>,binary_list)</span><br><span class="line">    real_list = (BINV*binary_list).<span class="built_in">sum</span>(axis = <span class="number">1</span>)/binary_list.<span class="built_in">sum</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;3 real_list&quot;</span>, real_list)</span><br><span class="line">    <span class="keyword">return</span> real_list</span><br></pre></td></tr></table></figure><p>在实现编码解码的过程中，发现一个有趣的事情，格雷码编码系统，通过有限次编码可以实现解码。</p><h2 id="通过有限次编码可以实现解码">3 通过有限次编码可以实现解码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="built_in">len</span> = <span class="number">200</span></span><br><span class="line">max_item = <span class="number">20000</span></span><br><span class="line">gv = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, size = (<span class="built_in">len</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1_gv&quot;</span>, gv)</span><br><span class="line"></span><br><span class="line">bin_list = np.logspace(start=<span class="built_in">len</span>-<span class="number">1</span>, stop=<span class="number">0</span>, base=<span class="number">2</span>, num=<span class="built_in">len</span>)</span><br><span class="line"><span class="comment"># print(bin_list)</span></span><br><span class="line">bv = gv</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_item):</span><br><span class="line">    bv = bv.cumsum()%<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> (bv == gv).<span class="built_in">all</span>() :</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输出迭代&quot;</span>,i, gv ,bv)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2_bv&quot;</span>, bv)</span><br></pre></td></tr></table></figure><p>从学数字电路开始，数字 IC 设计中或者自行设计电路、写程序的过程中，就一直非常青睐格雷码。</p><p>但这次重构遗传算法，旨在从基因角度入手调优该算法，发现了格雷码具有有限次编码实现解码的特点，还是觉得非常有意思。</p><p>仿佛在说，世界是普遍联系的，兜兜转转又回到起点。</p><blockquote><p>⚓ Carl Zhao<br> 🏢 逍遥科技有限公司<br> 💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。 <br>📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码解码 </tag>
            
            <tag> 格雷码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>往事与我:一粒金米</title>
      <link href="/2024/09/15/5_cnooc_king/"/>
      <url>/2024/09/15/5_cnooc_king/</url>
      
        <content type="html"><![CDATA[<blockquote><p>金米不是黄金制成的米，它最初就只是一粒家常未煮的大米，后来经过丽伟哥采用特殊的笔刻写上“健康、快乐”封装在一个透明的装有水的球体中，再穿上红绳就成了一个代表美好祝福的吊坠。<br> 谢谢丢失的金米，让我在2020伊始，想起一段恍如梦境般难忘的经历。</p></blockquote><p>金米不是黄金制成的米，它最初就只是一粒家常未煮的大米，后来经过丽伟哥采用特殊的笔刻写上“健康、快乐”封装在一个透明的装有水的球体中，再穿上红绳就成了一个代表美好祝福的吊坠。</p><p>我之所以称这粒米为金米，因为它的制作者丽伟哥姓金，丽伟哥是我去M平台顶岗之后才认识的，虽然之前在都同在CPC，但可能倒班原因，一直未认识。M平台设计是无人平台，M是代号但具体什么含义不知道，蓬莱油田的平台代号大抵是ABCDEF，其中B平台和RUP平台构成CPC，就是所谓的中心平台，一般自营平台也称之为CEP平台，后来我离开之前，又添了J平台、V平台、G平台，我猜可能与区域有一定关联。M平台可以说是渤海地区自动化程度最高的平台之一，M平台大部分工作不需要在M平台就可以完成，刚去无人平台开始时丽伟哥和我配合最多，当然因此他也算深受我害了，因为大部分老人都不愿意和一个没有经验的新人合作，甚至可以说不是合作，而是指导，当然，尽管有时也能感受到他的无奈和着急，但他也从未因此抱怨或者利用小技巧调班避开我这个烂摊子。</p><p>丽伟哥当时制作金米一共制作了两粒，一粒送给了建超哥，我也沾着建超哥的光有幸得到了一颗。丽伟哥那天给我们讲当时他在学校时靠这门手艺在学校门口摆地摊赚过钱，我还开玩笑的说要拜他为师学习手艺来着，当然后来在每天的穿梭和工作中忘了。当时他问超哥和我选刻什么字时，我一直以为自己很不贪心，选了“健康、快乐”四个平平常常的字，其实不然，这才是最贪心的。首先，健康是人生最大的福气，人的一生要一直健康可以说是不可能的，人这一辈子或多或少的都要与病魔打交道，可以说健康才是人最顶级的奢侈品。其次，简单的快乐又谈何容易，饥饿的时候希望有一口饭吃足矣，吃饱喝足之后又有了新的烦恼，人这一辈子单单做到知足就很难。然而我意识到这些所谓的平常是何等的奢侈已是在那很久很久以后。</p><p>我一直以为我的金米被存放在红色储物箱里，然而前段时间翻旧物却没找见，很是难受。我一直被我的朋友诟病从不主动联系别人，其实不是不想联系，是害怕联系，首先害怕自己的热情被冷水浇灭，更重要的是，我是一个精神层面洁癖者。前段时间，我和高中好友联系，我就只说了一句“溺水三千只取一瓢饮”，他便拿出老梗一句一个“一瓢”，他的幽默在我看来就显得特别轻浮，从这以后我便也很少和他联系。我想，如果常联系会使原有的认知发生改变，就把所有的感恩、感谢放在心里，何必让这些美好变质。当然我一直以来的态度，严于待人，宽于律己，可能也是时候应该彻底改改了。</p><p>读了更多的书，遇见更多的人，我更加地不再主动的去经营所谓的友谊，真挚的友谊从不是经营来的，而是真诚相待换得的，有幸能一起相处时就拿出十分真心去珍惜，有朝一日分别时，不是伤感，而是用心去祝福。我的金米虽然丢失，甚至我也从未向丽伟哥说过哪怕一声谢谢，但我从未忘记昔日在M平台一起合作的日子、一起吃过的饭、一起面对的困难。</p><p>谢谢丢失的金米，让我在2020伊始，想起一段恍如梦境般难忘的经历。</p><blockquote><p>⚓ Carl Zhao<br>🏢 逍遥科技有限公司<br>💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br>📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋过往 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNOOC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>少年的你</title>
      <link href="/2024/09/15/2_Shaonian/"/>
      <url>/2024/09/15/2_Shaonian/</url>
      
        <content type="html"><![CDATA[<p>我已经很久不看青春剧和哲理剧了，现在看电影一般喜欢看喜剧。很多时候电影里的社会现象离自己太远，看了之后会有一种无病呻吟的感觉，因为生活圈狭窄的我没有接触这些现象，看了之后也没有太多感情，看多了之后，便会反感。《少年的你》中主角的生活，其实也离我很远，但在某个镜头还是被感动，上次有这样的感动还是看《岁月神偷》，那时生活缺少感动，正好可以为赋新词强说愁。</p><p>从题材上来说，选择校园暴力为主题就已经胜了《我不是药神》，每个人几乎都上过学即使没有参与或者遭遇校园暴力，但不是每个人都生过病，在看《我不是药神》时，我一度觉得电影太过煽情，用力过猛地在表达某种现象，因此在看到最后时不是感动，而是觉得电影在过度消费我们的感动，或许我刚走出校园那时会为这些刻意修饰的画面感动，但现在不会。《少年的你》刚开始时陈念重复领读“It was playground”"It used to be playground"一直到胡小蝶跳楼自杀我都打不起任何精神，一度以为是《致青春》之流的打着青春感动旗号圈钱的烂片。但是等看完之后，不仅很是感动，居然还会下载回放，生怕漏掉很多细节，虽然刚开始说不出泪点，回忆和情节唯一相似便是都上过学。在回放时，我带着心中感动、以及对感动来源的探索细细品味电影情节。想起前段时间和大学舍友小聚，大家不可避免地谈起自己的过去，有些人的成长之路平淡到无从想起，有些人的求学过程坎坷让听得人难以置信，有些人自我做作地为青春添一笔试图以此换取传奇以求铭记。</p><p>我们生活的环境不同，导致了每个人都有不同的性格，这正是因为各异的性格，让我们走向了不同的通往成年之路，或许正是看到听到更多的人生百态之后看到电影以后也明白了不是每个人都可以顺利地长大，也明白了很多人性格抑郁的来源。我成长生活中最阴暗的时候是小学四年级，那年我被贴上暴力的称号，那年我被罚抄的作业到现在还欠着，那年我身边的小伙伴现在几乎都是我们镇上名霸一方的混混，我至今记得升五年级时我飞也似的逃离。那年，班主任生宝宝，换了一个老师来带课，老师姓田，刚开始还感觉到特别轻松，因为新老师很难一时适应我们，而这样的新环境对孩子们来说缺是一个美好的缓冲期。我已经忘了美好缓冲过后对大部分孩子来说究竟是美丽憧憬还是噩梦降临，但对我来说，之后在很长一段时间，我对学校产生了一种无名的憎恨。噩梦降临前夕，是一小段不太友好的梦，我首次在小学时遇到一个喜欢画三八线的同桌，超过界限便会狠狠打我，一下课便穿梭在走廊上玩耍的我没太多时间顾及这些，保持着“你画你的线，我不搭理你”的态度，本以为一切照旧也就这样了，事情的发展总是千奇古怪，这个女孩总是忘记带书，我便友善地和她分享，谁知她害怕老师惩罚用把我的书拉到她那边，这也就算了，合用书的过程中难免会遇到胳膊过线，便会狠狠地挨打，终于在一节美术课我忍无可忍地爆发了，这节美术课她依旧忘了带书，她全部拿走也罢，可她偏偏在我用水彩笔勾勒我美术作品时推了我一下胳膊，我的作品一下成了残缺品，我愤怒地越过界限抢回自己的书然后撕了，可是万万没想到她居然哭了。然后美术老师告诉了班主任，班主任不分青红皂白地说我行为暴力，然后把另一个有心脏病的女孩调到我旁边，那时真有被吓到，心脏病女孩在我旁边坐了大半年，我都不敢和她说话，不过也能感到她的善意，我看不清黑板时，她用小声读给我听，那时我不知道什么是心脏病，害怕她发病找我，几乎从不回应，一如既往，一下课就出去，上课踏铃归来。当时很难理解女孩到底有多会假哭才会做到如此厚颜无耻，也很难理解一个临时代课班主任如此荒缪地用暴力描述我。噩梦才刚刚开始，然后某次非常规写字课，我坐在那时要好的小伙伴旁边，那时只要非正式课我都会这样，老师评价某个小伙伴的字很难看，问那孩子这字像什么，当时我旁边的孩子就回答像耗子，其实这是搞笑，因为台上的小伙伴坏名就是耗子，然后另一小伙伴说老鼠，还有一个调皮的孩子来了句青蛙，我就用方言补了一句蟾蜍，我们这几个很是开心地笑着，本以为非正课也没事，因为平时写字课就是这样，哪知班主任那天可能心情不好突然发了飙，让我们四个人抄书后生词表五遍，当然我们几个继续当作开玩笑没当回事，班主任第二天检查后继续大怒，让我们以后不要上写字课就罚抄生词表，并且每天写不掉就乘以二，那一年我签老师的生词表达好几百遍，我忐忑的害怕待在教室里，害怕上班主任的课，甚至讨厌学习。如果我这拍校园暴力顶多只能拍个喜剧，而我这个施暴者却是那个受害者。那一年，也许因为特别，每个陪我玩的小伙伴我都记得，画三八线的女孩，心脏病女孩，都记得，有些初中时还是同学，但遇见时都毫无例外地选择假装遗忘，我也是。看完《少年的你》我想如果我那时遇到的不是爱恶人先哭的画三八线女孩，而是一个更加恶劣但善于伪装的孩子，如此不分青红皂白的老师也许也会将我逼上一条反抗到真正施暴的不归路。</p><p>“只有你赢了，我才不算输”，“我保护你，你保护全世界”，虽然看过太多有关校园青春爱情的小说，但这些陈词滥调还是会让我有些许感动，可能是小说情节再现，可能是自己校园生活的一贫如洗。</p><p>初看时，我认为《少年的你》中最有争议的是小北替陈念顶罪，当时我在想，刚认识没有几个月的朋友不可能会这样做，而且是杀人罪，我一度认为这是编剧为了整出点花子来故意所为。当我用小屏回放时，我想起高中自己很多一冲动就去干了的事情，当时不后悔，现在也不后悔，虽然不像电影情节如此精彩，但起因都是因为生活里的一丁点感动。小北真正感动于陈念是因为她问了他疼吗，他说那是第一次有人这样问。电影后期通过两个警察也给出了答案，“你相信一个人会替另一个顶杀人罪和强奸罪吗？”“我们不会，可他们是少年。”年少的我们不经事，缺少成年的人理性，只要有一丝感动就会付出所有，电影里的小北不正是我们的少年时？</p><p>最后，“We are all in the gutter ,but some of us are looking at the stars.”“我们生活在阴沟里，但依然有人仰望星空”，献给所有的少年以及曾经少年的你！</p><blockquote><p>⚓ Carl Zhao<br>🏢 逍遥科技有限公司<br>💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br>📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>萤火之森</title>
      <link href="/2024/09/15/3_Firefly_Forest/"/>
      <url>/2024/09/15/3_Firefly_Forest/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有幸，如果你有看到这篇分享，哪怕是不经意的误入；<br> 有幸，如果你也看过《萤火之森》，哪怕已经忘记故事情节;<br> 有幸，如果你发现这是跨越成长的对话;</p></blockquote><p>年幼，相遇，在老家屋后的神秘森林；</p><p>迷路，啼哭，人类的小孩那么可怜。</p><p>带着面具，有趣，说他是妖怪；</p><p>可怜，却又可恶，非要触碰我的身体。</p><p>好奇，回家问过关于森林所有的故事，没人了解，带着面具的妖怪；</p><p>假装睡着，但眼睛一直睁着，看着你。</p><p>忍不住，摘下你的面具，你的脸庞与人类无异；</p><p>第一次感受人类的温度，那么亲近，即使隔着面具。</p><p>你的脸庞在我心底第一次留下烙印，从未想过，在之后的岁月里，都再也难以忘记；</p><p>第一次动了心，却假装镇定，人类的温度是那么有吸引力。</p><p>突然喜欢上夏天，因为夏天有你；</p><p>即使不冷，也爱在冬季戴上围巾，你送的围巾，有人类的温暖。</p><p>你摘下面具，还是初见的模样，而这些年里，我已不再是第一次相遇在森林时的幼稚孩童；</p><p>这些年见证你的成长，那个初见啼哭的幼童，已长成我喜欢的模样，内心再也不能平静。</p><p>那日路滑，扶着同学的手走过，想到你；</p><p>和你并肩走在森林，听你讲未来的规划，有我足矣。</p><p>毕业后，希望回到老家工作，这样就可以常常见到你，哪怕只是并肩，只希望可以一直走下去；</p><p>有相遇就会由分离，即使再怎么不愿意。</p><p>有人类参与的仪式，会很但心；</p><p>看着你笑得很开心，我想我已做好所有决定，但抱歉没告诉你。</p><p>扶起小孩，看你逐渐消失，抱得更紧；</p><p>第一次也是最后一次抱你，没有难过，用力去笑，把最美的瞬间留给你。</p><p>明明知道，那是人类小孩，却还去触碰；</p><p>不忍心去触碰你，怕你余生会怪自己。</p><p>如果不去扶那个小孩，那就不是你；</p><p>谢谢你，哪怕只是一次拥抱，也很开心。</p><p>感恩生命，让我们在最美的时光相遇，爱而不得也是一种美丽；</p><p>遇见你，已是有幸，记得森林里依旧有我们曾经一起走过留下的气息。</p><blockquote><p>⚓ Carl Zhao<br>🏢 逍遥科技有限公司<br>💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br>📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动漫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐秘在角落里的坏小孩</title>
      <link href="/2024/09/15/4_book_bad_boy/"/>
      <url>/2024/09/15/4_book_bad_boy/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于先看《坏小孩》再看《隐秘的角落》导致剧情在脑海交织，时空错乱。<br> 如今虽然已很久很久，然而在某个街头，遇见和曾经很像的回眸，痛苦往事依然会涌上心头，然而那些路却无法重走。</p></blockquote><p>当朱朝阳将妹妹失手推下楼的时候，这个游戏就只剩下朱朝阳和张东升的博弈，而本以为打破朱朝阳宁静生活的普普和丁浩注定只有死这一种结局。</p><p>朱朝阳和张东升在很多地方都很像，都喜欢数学。都是生活的受害者，都遭受着家庭的冷暴力，一个来自父亲，一个来自妻子。都有着看似隐忍实则狠毒的内心，一个在面对父亲不爱同学欺凌时，处处小心，却十分歹毒的借他人之手杀死父亲，并在结尾借用日记和哭诉解决同学欺凌。一个在面对即将离婚净身出户时，心生歹念，伪装讨好岳父岳母，将其杀害。最重要的是，这两人都表明，只有死人才会保守秘密，这也就注定最后他们只会有一个人活下去。</p><p>第一次看完之后，我比较纠结朱朝阳的黑化时间节点，书开头时那个讨人可怜的小孩短时间内恶魔化的过程我实在难以想象。如果知道结局，时间倒回到丁浩和普普第一次敲门的时候，我想转身扭头就走的应该是丁浩和普普。很多结局看似可以改变，其实从发生的开始已经注定，唯一的意外是小说将原本两个不想干的人朱朝阳和张东升写到了一起。当朱朝阳同意捉弄妹妹时，妹妹的死已然无力改变，因为朱朝阳接受不了原本已经不爱自己的父亲再知道自己一丁点的不好，尤其是还关于那个住在父亲心里的妹妹。朱晶晶的死如果无法改变，那么普普和丁浩的死也无法改变，我本以为朱朝阳利用感情劝说普普杀人是为了让他们都站到同一条船上，给他们就一条生路。可是我的本以为只是我以为的，而朱朝阳始终坚信他的原则：死人才会保守秘密。写日记的时候，他的未来就不再有普普，也不再有丁浩，所有和普普说的那些看似情话的承诺不过都是利用，“四人麻将”，“明年一定”，都是谎话。</p><p>其实，比起张东升，我更觉得严良和朱朝阳是一类人，朱朝阳的日记勾起严良的共鸣，严良问朝阳的那道印错了的无解题只有他俩知道，彼时的张东升根本无心放在这方面，张东升知道无解也是由严良口述得知。严良偷偷撕下笔记检测没有直接要求公安部门检测，也说明了严良一定会放过朱朝阳，从内心某个深处，他早已经做出了选择——放过这个少年。</p><p>关于严良，书中只交代他是浙大数学系博导、张东升的老师、张东升妻子徐静家的亲戚，曾经是省公安厅的刑侦专家，至于他的经历书中也只有结尾处他在看朱朝阳笔记时一笔带过的独白回忆，我们无从得知，或许他也曾和朱朝阳一样经历黑暗，一些已经不能开口的人带走所有的秘密，在某个深夜，被噩梦吓醒，很多路已不能回头。当他看见这本日记，就像看到曾经的自己，如今虽然已很久很久，然而在某个街头，遇见和曾经很像的回眸，痛苦往事依然会涌上心头，然而那些路却无法重走。</p><blockquote><p>⚓ Carl Zhao<br>🏢 逍遥科技有限公司<br>💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br>📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
            <tag> 网剧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 安装简明教程</title>
      <link href="/2024/09/02/1_hexo_install/"/>
      <url>/2024/09/02/1_hexo_install/</url>
      
        <content type="html"><![CDATA[<blockquote><p>hexo 快速、简洁且高效的博客框架</p></blockquote><h4 id="安装与部署">1 安装与部署</h4><p>首先，建议更换源，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><p>安装 hexo，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>初始化 hexo，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>编译 hexo，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>启动 hexo，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>建议每次编译前清理，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>安装部署，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>配置 github 仓库，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: &lt;repository url&gt; <span class="comment"># https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><p>部署，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h4 id="域名解析">2 域名解析</h4><p>1 github -&gt; repoditory -&gt; setting -&gt; pages -&gt; Custom domain</p><p>这样每次部署后都需要手动配置，或者</p><p>hexo -&gt; source -&gt; CNAME</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example.com</span><br></pre></td></tr></table></figure><p>这种方法部署自动配置域名。</p><p>2 域名服务商后台解析域名即可。</p><blockquote><p>⚓ Carl Zhao<br>🏢 逍遥科技有限公司<br>💭 曾经也是追光少年，然而少年归来已不再是少年，但依然在追光的路上。<br>📧 邮箱：1005513510@qq.com</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 念恋分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 教程 </tag>
            
            <tag> 前端技术 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
